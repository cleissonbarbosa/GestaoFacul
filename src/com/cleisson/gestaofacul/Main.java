/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cleisson.gestaofacul;

import static com.cleisson.gestaofacul.SalvarNoPc.ReadFile;
import static com.cleisson.gestaofacul.SalvarNoPc.WriteFile;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import oracle.jrockit.jfr.JFR;

/**
 *
 * @author cleisson
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form professores
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameEditorPessoas = new javax.swing.JFrame();
        painelEditar = new javax.swing.JInternalFrame();
        painelEditar.setEnabled(false);
        btnEditar = new javax.swing.JButton();
        btnCalcelarEditar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TabelaEditar = new javax.swing.JTable();
        painelTabsPrincipal = new javax.swing.JTabbedPane();
        tabCadastroProfFun = new javax.swing.JPanel();
        nome = new javax.swing.JTextField();
        matricula = new javax.swing.JTextField();
        endereco = new javax.swing.JTextField();
        salario = new javax.swing.JTextField();
        dataDeAdimissao = new javax.swing.JTextField();
        telefone = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        escolha = new javax.swing.JComboBox<>();
        txtQuemVoceQuerCadastrar = new javax.swing.JLabel();
        escolas = new javax.swing.JComboBox<>();

        setorSeletor = new javax.swing.JComboBox<>();
        this.setorSeletor.setEnabled(false);
        txtCadastroDePessoas = new javax.swing.JLabel();
        imgCadastroDePessoas = new javax.swing.JLabel();
        txtEscolhaEscola = new javax.swing.JLabel();
        btnCadastrarSetor = new javax.swing.JButton();
        this.btnCadastrarSetor.setEnabled(false);
        cursosSeletorAluno = new javax.swing.JComboBox<>();
        this.cursosSeletorAluno.setEnabled(false);
        txtEscolhaSetor = new javax.swing.JLabel();
        this.txtEscolhaSetor.setEnabled(false);
        txtEscolhaCurso = new javax.swing.JLabel();
        this.txtEscolhaCurso.setEnabled(false);
        tabCadastroEscolas = new javax.swing.JPanel();
        nomeEscola = new javax.swing.JTextField();
        btnSalvarEscola = new javax.swing.JButton();
        escolhaEscola = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVerProfessores = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        imgEscola = new javax.swing.JLabel();
        progressoTabela = new javax.swing.JProgressBar();
        txtCadastrarEscola = new javax.swing.JLabel();
        txtListarProfessores = new javax.swing.JLabel();
        tabCurso = new javax.swing.JPanel();
        txtCurso = new javax.swing.JLabel();
        nomeCurso = new javax.swing.JTextField();
        escolasCurso = new javax.swing.JComboBox<>();
        btnSalvarCurso = new javax.swing.JButton();
        imgCursos = new javax.swing.JLabel();
        tabDisciplinas = new javax.swing.JPanel();
        txtDisciplinas = new javax.swing.JLabel();
        imgDisciplinas = new javax.swing.JLabel();
        nomeDisciplina = new javax.swing.JTextField();
        cursosSeletor = new javax.swing.JComboBox<>();
        btnSalvarDisciplinas = new javax.swing.JButton();
        tabTurmas = new javax.swing.JPanel();
        txtTurmas = new javax.swing.JLabel();
        imgTurmas = new javax.swing.JLabel();
        nomeTurma = new javax.swing.JTextField();
        DisciplinaSeletor = new javax.swing.JComboBox<>();
        btnSalvarTurmas = new javax.swing.JButton();
        ProfessorSeletor = new javax.swing.JComboBox<>();
        txtEscolhaDisciplina = new javax.swing.JLabel();
        txtEscolhaProfessor = new javax.swing.JLabel();
        txtDesenvolvedor = new javax.swing.JLabel();
        jSeparador = new javax.swing.JSeparator();
        menuBarPrincipal = new javax.swing.JMenuBar();
        MenuGerarRelatorio = new javax.swing.JMenu();
        menuGerarRelatorio = new javax.swing.JMenu();
        relatorioProfessores = new javax.swing.JMenuItem();
        relatorioFuncionarios = new javax.swing.JMenuItem();
        relatorioAlunos = new javax.swing.JMenuItem();
        menuDeletarRegistros = new javax.swing.JMenu();
        MenuItemDelTudo = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        MenuItemProfessor = new javax.swing.JMenuItem();
        MenuItemFunc = new javax.swing.JMenuItem();
        MenuItemAluno = new javax.swing.JMenuItem();
        MenuItemEscola = new javax.swing.JMenuItem();
        MenuItemCurso = new javax.swing.JMenuItem();
        MenuItemDisc = new javax.swing.JMenuItem();
        MenuItemTurma = new javax.swing.JMenuItem();
        MenuItemSair = new javax.swing.JMenuItem();
        menuVerEditar = new javax.swing.JMenu();
        editarProfessor = new javax.swing.JMenuItem();
        editarAluno = new javax.swing.JMenuItem();
        editarFuncionario = new javax.swing.JMenuItem();

        frameEditorPessoas.setMinimumSize(new java.awt.Dimension(700, 500));
        frameEditorPessoas.setPreferredSize(new java.awt.Dimension(743, 533));
        frameEditorPessoas.setResizable(false);
        frameEditorPessoas.setSize(new java.awt.Dimension(690, 500));
        frameEditorPessoas.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                frameEditorPessoasWindowClosed(evt);
            }
        });

        painelEditar.setVisible(true);

        btnEditar.setText("Salvar Edição");
        btnEditar.setName(""); // NOI18N
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnCalcelarEditar.setText("Cancelar");
        btnCalcelarEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcelarEditarActionPerformed(evt);
            }
        });

        TabelaEditar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Matricula", "Endereço", "Telefone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TabelaEditar);

        javax.swing.GroupLayout painelEditarLayout = new javax.swing.GroupLayout(painelEditar.getContentPane());
        painelEditar.getContentPane().setLayout(painelEditarLayout);
        painelEditarLayout.setHorizontalGroup(
            painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEditarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelEditarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCalcelarEditar))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelEditarLayout.setVerticalGroup(
            painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelEditarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnCalcelarEditar))
                .addContainerGap())
        );

        javax.swing.GroupLayout frameEditorPessoasLayout = new javax.swing.GroupLayout(frameEditorPessoas.getContentPane());
        frameEditorPessoas.getContentPane().setLayout(frameEditorPessoasLayout);
        frameEditorPessoasLayout.setHorizontalGroup(
            frameEditorPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameEditorPessoasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelEditar)
                .addContainerGap())
        );
        frameEditorPessoasLayout.setVerticalGroup(
            frameEditorPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameEditorPessoasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelEditar)
                .addGap(21, 21, 21))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Gestão - Projeto da disciplina P.O.O");
        setBackground(java.awt.SystemColor.controlLtHighlight);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setLocation(new java.awt.Point(150, 150));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(690, 500));

        painelTabsPrincipal.setBackground(new java.awt.Color(204, 204, 204));
        painelTabsPrincipal.setForeground(new java.awt.Color(255, 0, 0));

        tabCadastroProfFun.setBackground(java.awt.SystemColor.controlLtHighlight);

        nome.setText("Nome completo");
        nome.setToolTipText("Informe o nome completo");
        nome.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nome.setName(""); // NOI18N
        nome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nomeFocusLost(evt);
            }
        });

        matricula.setText("Matricula");
        matricula.setToolTipText("Insira apenas numeros");
        matricula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                matriculaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                matriculaFocusLost(evt);
            }
        });
        matricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaActionPerformed(evt);
            }
        });

        endereco.setText("Endereço");
        endereco.setToolTipText("Informe o endereço completo");
        endereco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enderecoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enderecoFocusLost(evt);
            }
        });

        salario.setText("Salario");
        salario.setToolTipText("Informe o salario, é permitido o uso de virgula e ponto");
        salario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                salarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                salarioFocusLost(evt);
            }
        });

        dataDeAdimissao.setText("Data de Admissão");
        dataDeAdimissao.setToolTipText("Insira apenas numeros");
        dataDeAdimissao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dataDeAdimissaoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dataDeAdimissaoFocusLost(evt);
            }
        });

        telefone.setText("Telefone");
        telefone.setToolTipText("Insira apenas numeros");
        telefone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                telefoneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                telefoneFocusLost(evt);
            }
        });

        btnSalvar.setFont(new java.awt.Font("Tekton Pro Cond", 0, 18)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(0, 153, 51));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSalvar.setIconTextGap(8);
        btnSalvar.setName(""); // NOI18N
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        escolha.setFont(escolas.getFont());
        escolha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Professores", "Funcionarios", "Alunos" }));
        escolha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaActionPerformed(evt);
            }
        });

        txtQuemVoceQuerCadastrar.setText("Quem você quer cadastrar?");

        escolas.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N

        setorSeletor.setFont(escolas.getFont());
        setorSeletor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setorSeletorActionPerformed(evt);
            }
        });

        txtCadastroDePessoas.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        txtCadastroDePessoas.setForeground(new java.awt.Color(102, 102, 102));
        txtCadastroDePessoas.setText("Cadastro de pessoas");

        imgCadastroDePessoas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/CadastroImagem.png"))); // NOI18N

        txtEscolhaEscola.setText("Escolha a escola:");

        btnCadastrarSetor.setText("Cadastrar setor");
        btnCadastrarSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarSetorActionPerformed(evt);
            }
        });

        cursosSeletorAluno.setFont(escolas.getFont());

        txtEscolhaSetor.setText("Escolha o Setor:");

        txtEscolhaCurso.setText("Escolha o Curso:");

        javax.swing.GroupLayout tabCadastroProfFunLayout = new javax.swing.GroupLayout(tabCadastroProfFun);
        tabCadastroProfFun.setLayout(tabCadastroProfFunLayout);
        tabCadastroProfFunLayout.setHorizontalGroup(
            tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nome, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(matricula))
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(dataDeAdimissao, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(telefone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(salario, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroProfFunLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnSalvar)
                                .addGap(191, 191, 191)
                                .addComponent(btnCadastrarSetor)
                                .addGap(51, 51, 51))
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(escolas, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEscolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEscolhaSetor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(setorSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(cursosSeletorAluno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(txtEscolhaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(txtQuemVoceQuerCadastrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(escolha, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(imgCadastroDePessoas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCadastroDePessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 86, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabCadastroProfFunLayout.setVerticalGroup(
            tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCadastroDePessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgCadastroDePessoas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuemVoceQuerCadastrar)
                    .addComponent(escolha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataDeAdimissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEscolhaEscola)
                    .addComponent(txtEscolhaSetor))
                .addGap(6, 6, 6)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setorSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(escolas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEscolhaCurso)
                .addGap(5, 5, 5)
                .addComponent(cursosSeletorAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCadastrarSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        nome.getAccessibleContext().setAccessibleName("");

        painelTabsPrincipal.addTab("Cadastro de Pessoas", tabCadastroProfFun);

        nomeEscola.setText("Nome Da Escola");

        btnSalvarEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarEscola.setText("Salvar");
        btnSalvarEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarEscolaActionPerformed(evt);
            }
        });

        escolhaEscola.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha uma Escola" }));
        escolhaEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaEscolaActionPerformed(evt);
            }
        });

        tabelaVerProfessores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Matricula", "Endereço", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaVerProfessores);

        imgEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/EscolaImagem.png"))); // NOI18N

        progressoTabela.setBackground(new java.awt.Color(204, 204, 204));
        progressoTabela.setForeground(new java.awt.Color(102, 102, 102));
        progressoTabela.setStringPainted(true);

        txtCadastrarEscola.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        txtCadastrarEscola.setForeground(new java.awt.Color(102, 102, 102));
        txtCadastrarEscola.setText("Cadastrar Escolas");

        txtListarProfessores.setFont(new java.awt.Font("Segoe UI Semibold", 2, 12)); // NOI18N
        txtListarProfessores.setText("Lista de Professores relacionados a escolas");

        javax.swing.GroupLayout tabCadastroEscolasLayout = new javax.swing.GroupLayout(tabCadastroEscolas);
        tabCadastroEscolas.setLayout(tabCadastroEscolasLayout);
        tabCadastroEscolasLayout.setHorizontalGroup(
            tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroEscolasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imgEscola)
                .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(txtCadastrarEscola))
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvarEscola)))
                .addGap(28, 28, 28))
            .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(progressoTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(escolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtListarProfessores))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabCadastroEscolasLayout.setVerticalGroup(
            tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(txtCadastrarEscola)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nomeEscola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSalvarEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3))
                    .addComponent(imgEscola, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtListarProfessores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(escolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(progressoTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelTabsPrincipal.addTab("Cadastro de Escolas", tabCadastroEscolas);

        tabCurso.setBackground(java.awt.SystemColor.window);

        txtCurso.setFont(new java.awt.Font("SimSun-ExtB", 0, 24)); // NOI18N
        txtCurso.setForeground(new java.awt.Color(102, 102, 102));
        txtCurso.setText("Cadastro de Cursos");

        nomeCurso.setText("Nome do Curso");

        escolasCurso.setFont(escolas.getFont());

        btnSalvarCurso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarCurso.setText("Salvar");
        btnSalvarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarCursoActionPerformed(evt);
            }
        });

        imgCursos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/CursoImagem.png"))); // NOI18N
        imgCursos.setMinimumSize(new java.awt.Dimension(341, 300));

        javax.swing.GroupLayout tabCursoLayout = new javax.swing.GroupLayout(tabCurso);
        tabCurso.setLayout(tabCursoLayout);
        tabCursoLayout.setHorizontalGroup(
            tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCursoLayout.createSequentialGroup()
                .addGroup(tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCursoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeCurso)
                            .addComponent(escolasCurso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(tabCursoLayout.createSequentialGroup()
                        .addGroup(tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCursoLayout.createSequentialGroup()
                                .addGap(306, 306, 306)
                                .addComponent(btnSalvarCurso))
                            .addGroup(tabCursoLayout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(txtCurso))
                            .addGroup(tabCursoLayout.createSequentialGroup()
                                .addGap(318, 318, 318)
                                .addComponent(imgCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 244, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabCursoLayout.setVerticalGroup(
            tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCursoLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(imgCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCurso)
                .addGap(52, 52, 52)
                .addComponent(nomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(escolasCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnSalvarCurso)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        painelTabsPrincipal.addTab("Cadstro de Curso", tabCurso);

        tabDisciplinas.setBackground(java.awt.SystemColor.controlLtHighlight);

        txtDisciplinas.setFont(new java.awt.Font("SimSun-ExtB", 0, 24)); // NOI18N
        txtDisciplinas.setForeground(new java.awt.Color(102, 102, 102));
        txtDisciplinas.setText("Cadastro de Disciplinas");

        imgDisciplinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinasImagem.png"))); // NOI18N
        imgDisciplinas.setMinimumSize(new java.awt.Dimension(341, 300));

        nomeDisciplina.setText("Nome da disciplina");

        cursosSeletor.setFont(escolas.getFont());

        btnSalvarDisciplinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarDisciplinas.setText("Salvar");
        btnSalvarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarDisciplinasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabDisciplinasLayout = new javax.swing.GroupLayout(tabDisciplinas);
        tabDisciplinas.setLayout(tabDisciplinasLayout);
        tabDisciplinasLayout.setHorizontalGroup(
            tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                .addGroup(tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabDisciplinasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeDisciplina)
                            .addComponent(cursosSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(tabDisciplinasLayout.createSequentialGroup()
                        .addGroup(tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                                .addGap(306, 306, 306)
                                .addComponent(btnSalvarDisciplinas))
                            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                                .addGap(205, 205, 205)
                                .addComponent(txtDisciplinas)))
                        .addGap(0, 227, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(imgDisciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabDisciplinasLayout.setVerticalGroup(
            tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(imgDisciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDisciplinas)
                .addGap(52, 52, 52)
                .addComponent(nomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(cursosSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnSalvarDisciplinas)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        painelTabsPrincipal.addTab("Cadastro Disciplinas", tabDisciplinas);

        tabTurmas.setBackground(java.awt.SystemColor.controlLtHighlight);

        txtTurmas.setFont(new java.awt.Font("SimSun-ExtB", 0, 24)); // NOI18N
        txtTurmas.setForeground(new java.awt.Color(102, 102, 102));
        txtTurmas.setText("Cadastro de Turmas");

        imgTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasImagem.png"))); // NOI18N
        imgTurmas.setMinimumSize(new java.awt.Dimension(341, 300));

        nomeTurma.setText("Nome da Turma");

        DisciplinaSeletor.setFont(escolas.getFont());

        btnSalvarTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarTurmas.setText("Salvar");
        btnSalvarTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarTurmasActionPerformed(evt);
            }
        });

        ProfessorSeletor.setFont(escolas.getFont());

        txtEscolhaDisciplina.setText("Escolha uma disciplina:");

        txtEscolhaProfessor.setText("Escolha um professor:");

        javax.swing.GroupLayout tabTurmasLayout = new javax.swing.GroupLayout(tabTurmas);
        tabTurmas.setLayout(tabTurmasLayout);
        tabTurmasLayout.setHorizontalGroup(
            tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabTurmasLayout.createSequentialGroup()
                .addGroup(tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabTurmasLayout.createSequentialGroup()
                        .addGroup(tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addGap(307, 307, 307)
                                .addComponent(imgTurmas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(txtTurmas))
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addGap(307, 307, 307)
                                .addComponent(btnSalvarTurmas))
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtEscolhaDisciplina)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(tabTurmasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeTurma, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                            .addComponent(DisciplinaSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProfessorSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addComponent(txtEscolhaProfessor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 590, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        tabTurmasLayout.setVerticalGroup(
            tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabTurmasLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(imgTurmas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTurmas)
                .addGap(36, 36, 36)
                .addComponent(nomeTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(txtEscolhaDisciplina)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisciplinaSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEscolhaProfessor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProfessorSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(btnSalvarTurmas)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        painelTabsPrincipal.addTab("Cadastro de Turmas", tabTurmas);

        txtDesenvolvedor.setText("Desenvolvido por: Cleisson B.");

        MenuGerarRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/opcoesImagem.png"))); // NOI18N
        MenuGerarRelatorio.setText("Opções");

        menuGerarRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/gerarPDFImagem.png"))); // NOI18N
        menuGerarRelatorio.setText("Gerar Relatorios");
        menuGerarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGerarRelatorioActionPerformed(evt);
            }
        });

        relatorioProfessores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioProfessores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N
        relatorioProfessores.setText("Professores");
        relatorioProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioProfessoresActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioProfessores);

        relatorioFuncionarios.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioFuncionarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/funcionarioImagem.png"))); // NOI18N
        relatorioFuncionarios.setText("Funcionarios");
        relatorioFuncionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioFuncionariosActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioFuncionarios);

        relatorioAlunos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioAlunos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        relatorioAlunos.setText("Alunos");
        relatorioAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioAlunosActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioAlunos);

        MenuGerarRelatorio.add(menuGerarRelatorio);

        menuDeletarRegistros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/deletarImagem.png"))); // NOI18N
        menuDeletarRegistros.setText("Deletar Registros");

        MenuItemDelTudo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemDelTudo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/deletarTudoImagem.png"))); // NOI18N
        MenuItemDelTudo.setText("Todos");
        MenuItemDelTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDelTudoActionPerformed(evt);
            }
        });
        menuDeletarRegistros.add(MenuItemDelTudo);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/deletarPorCategoriaImagem.png"))); // NOI18N
        jMenu3.setText("Por Categorias");

        MenuItemProfessor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N
        MenuItemProfessor.setText("Professores");
        MenuItemProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemProfessorActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemProfessor);

        MenuItemFunc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/funcionarioImagem.png"))); // NOI18N
        MenuItemFunc.setText("Funcionarios");
        MenuItemFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFuncActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemFunc);

        MenuItemAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        MenuItemAluno.setText("Alunos");
        MenuItemAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAlunoActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemAluno);

        MenuItemEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/escolasImagem.png"))); // NOI18N
        MenuItemEscola.setText("Escolas");
        MenuItemEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEscolaActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemEscola);

        MenuItemCurso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cursosImagem.png"))); // NOI18N
        MenuItemCurso.setText("Cursos");
        MenuItemCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCursoActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemCurso);

        MenuItemDisc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinasImagemIcone.png"))); // NOI18N
        MenuItemDisc.setText("Disciplinas");
        MenuItemDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDiscActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemDisc);

        MenuItemTurma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasImagensIcone.png"))); // NOI18N
        MenuItemTurma.setText("Turmas");
        MenuItemTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemTurmaActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemTurma);

        menuDeletarRegistros.add(jMenu3);

        MenuGerarRelatorio.add(menuDeletarRegistros);

        MenuItemSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        MenuItemSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/sairImagem.png"))); // NOI18N
        MenuItemSair.setText("Sair");
        MenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSairActionPerformed(evt);
            }
        });
        MenuGerarRelatorio.add(MenuItemSair);

        menuBarPrincipal.add(MenuGerarRelatorio);

        menuVerEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/editarImagem.png"))); // NOI18N
        menuVerEditar.setText("Ver/Editar");
        menuVerEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerEditarActionPerformed(evt);
            }
        });

        editarProfessor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        editarProfessor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N
        editarProfessor.setText("Professor");
        editarProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarProfessorActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarProfessor);

        editarAluno.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        editarAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        editarAluno.setText("Aluno");
        editarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarAlunoActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarAluno);

        editarFuncionario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        editarFuncionario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/funcionarioImagem.png"))); // NOI18N
        editarFuncionario.setText("Funcionario");
        editarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarFuncionarioActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarFuncionario);

        menuBarPrincipal.add(menuVerEditar);

        setJMenuBar(menuBarPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtDesenvolvedor)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparador)
                    .addComponent(painelTabsPrincipal, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(painelTabsPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtDesenvolvedor)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void escolhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            //Verifica se foi selecionado o item professor
            if (escolha.getSelectedItem().equals("Professores")) {
                //Habilita o escolas e desabilita o setor
                escolas.setEnabled(true);
                dataDeAdimissao.setEnabled(true);
                txtEscolhaEscola.setEnabled(true);
                setorSeletor.setEnabled(false);
                btnCadastrarSetor.setEnabled(false);
                cursosSeletorAluno.setEnabled(false);
                txtEscolhaCurso.setEnabled(false);
                txtEscolhaSetor.setEnabled(false);
                salario.setEnabled(true);
            } else if (escolha.getSelectedItem().equals("Funcionarios")) {
                //inverte caso seja selecionado outra opção
                escolas.setEnabled(false);
                dataDeAdimissao.setEnabled(true);
                txtEscolhaEscola.setEnabled(false);
                txtEscolhaCurso.setEnabled(false);
                setorSeletor.setEnabled(true);
                btnCadastrarSetor.setEnabled(true);
                cursosSeletorAluno.setEnabled(false);
                salario.setEnabled(true);
            } else if (escolha.getSelectedItem().equals("Alunos")) {
                escolas.setEnabled(false);
                txtEscolhaCurso.setEnabled(true);
                txtEscolhaSetor.setEnabled(false);
                txtEscolhaEscola.setEnabled(false);
                setorSeletor.setEnabled(false);
                btnCadastrarSetor.setEnabled(false);
                dataDeAdimissao.setEnabled(false);
                cursosSeletorAluno.setEnabled(true);
                salario.setEnabled(false);
            }
        });
    }//GEN-LAST:event_escolhaActionPerformed


    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            //Exibe Painel de confirmação
            if (JOptionPane.showConfirmDialog(null, "Tem Certeza que deseja Salvar?", "Salvar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                //Convertendo as entradas do usuario(String) em numeros
                if (!this.escolha.getSelectedItem().equals("Alunos")) {
                    String dataEmUmFormato = dataDeAdimissao.getText();
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    Date data = null;
                    try {

                        data = formato.parse(dataEmUmFormato);

                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    formato.applyPattern("ddMMyyyy");
                    String dataFormatada = formato.format(data);
                    dataAdimicao = Integer.parseInt(dataFormatada);
                }
                matriculaFunc = Integer.parseInt(this.matricula.getText()) + 1;
                if (!this.escolha.getSelectedItem().equals("Alunos")) {
                    salarioFunc = Float.parseFloat(this.salario.getText());
                }
                telefoneFunc = Integer.parseInt(this.telefone.getText());

                //Logica para quando o usuario seleciona o item professor    
                if (this.escolha.getSelectedItem().equals("Professores")) {
                    String escola = this.escolas.getSelectedItem().toString();
                    //Cria novo objeto com as entradas do usuario
                    professor = new Professor(this.endereco.getText(), matriculaFunc, nome.getText(), telefoneFunc);
                    professor.inserirProfessor(dataAdimicao, salarioFunc, escola);
                    exibeCadastro = professor.getNome() + " | " + professor.getMatricula() + "\n";
                    //Adicionando o novo objeto no Arrey List
                    professorDB.add(professor);
                    ProfessorSeletor.addItem(professor.getNome());
                    salvarDados(professorDB, "registroProfessor.txt");
                } else if (this.escolha.getSelectedItem().equals("Funcionarios")) {
                    //Logica para quando o usuario seleciona outro item   
                    administrativo = new Administrativo(this.endereco.getText(), matriculaFunc, nome.getText(), telefoneFunc);
                    administrativo.inserirAdministrativo(dataAdimicao, salarioFunc, this.setorSeletor.getSelectedItem().toString());
                    exibeCadastro = administrativo.getNome() + " | " + administrativo.getMatricula() + " | "
                            + this.setorSeletor.getSelectedItem().toString() + "\n";
                    //Adicionando o novo objeto no Arrey List
                    funcionarioDB.add(administrativo);
                    salvarDados(funcionarioDB, "registroAdm.txt");
                } else if (this.escolha.getSelectedItem().equals("Alunos")) {
                    String curso = cursosSeletorAluno.getSelectedItem().toString();
                    aluno = new Aluno(this.endereco.getText(), matriculaFunc, nome.getText(), telefoneFunc);
                    aluno.inserirAluno(curso);
                    exibeCadastro = aluno.getNome() + " | " + aluno.getMatricula() + " | " + aluno.getCurso() + "\n";
                    //Adicionando o novo objeto no Arrey List
                    alunoDB.add(aluno);
                    salvarDados(alunoDB, "registroAluno.txt");
                }
            }

            JOptionPane.showMessageDialog(null, exibeCadastro + "Salvo", "Salvo!", JOptionPane.INFORMATION_MESSAGE);
            btnSalvar.setName("Salvo");
        } catch (Exception e) {
            //Menssagem de Erro caso usuario insira uma entrada invalida
            JOptionPane.showMessageDialog(null, "                                 >>   ATENÇÂO!  <<\nVerifique se você preencheu algum campo incorretamente!\n\n"
                    + "> NÃO é permitido inserir LETRAS no lugar de numeros vice-versa.\n"
                    + "> É NECESSARIO preencher TODOS os campos!\n\n *Os campos incorretos estaram em vermelho!", "Erro! Não foi possível salvar!!", JOptionPane.ERROR_MESSAGE);
            btnSalvar.setName("ERRO");
            VerificaErro erro = new VerificaErro();
            if (!this.escolha.getSelectedItem().equals("Alunos")) {
                erro.encontrar(matricula);
                erro.encontrar(salario);
                erro.encontrar(telefone);
                erro.encontrar(escolas);
                erro.encontrar(setorSeletor);
            } else {
                erro.encontrar(matricula);
                erro.encontrar(telefone);
                erro.encontrar(cursosSeletorAluno);
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void salvarDados(ArrayList lista, String nomeDoArquivo) {
        Gson gson = new Gson();
        String json = gson.toJson(lista);
        WriteFile(json, nomeDoArquivo);
    }

    private void matriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matriculaActionPerformed

    private void setorSeletorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setorSeletorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setorSeletorActionPerformed

    private void btnSalvarEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarEscolaActionPerformed
        SwingUtilities.invokeLater(() -> {
            Escolas novaEscola = new Escolas(nomeEscola.getText());
            if (!escolasDB.isEmpty()) {
                if (escolaExiste()) {

                } else {
                    escolasDB.add(novaEscola);
                    escolhaEscola.addItem(novaEscola.getNome());
                    escolas.addItem(novaEscola.getNome());
                    escolasCurso.addItem(novaEscola.getNome());
                    salvarDados(escolasDB, "registroEscolas.txt");
                }

            } else {
                escolasDB.add(novaEscola);
                escolhaEscola.addItem(novaEscola.getNome());
                escolas.addItem(novaEscola.getNome());
                escolasCurso.addItem(novaEscola.getNome());
                salvarDados(escolasDB, "registroEscolas.txt");
            }
        });
    }//GEN-LAST:event_btnSalvarEscolaActionPerformed
    private boolean escolaExiste() {
        boolean existe = false;
        for (int i = 0; i < escolasDB.size(); i++) {
            Escolas novo = (Escolas) escolasDB.get(i);
            if (nomeEscola.getText().equals(novo.getNome())) {
                JOptionPane.showMessageDialog(null, "Ja existe essa escola na base de dados!\nPor favor tente novamente.", "ERRO!", JOptionPane.ERROR_MESSAGE);
                existe = true;
                break;
            }
        }
        return existe;
    }

    private void escolhaEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaEscolaActionPerformed
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            for (int i = 0; i < professorDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                professor = (Professor) professorDB.get(i);
                //Verifica se o item selecionado é igual ao cadastrado
                if (professor.getEscolaOuSetor().equals(escolhaEscola.getSelectedItem().toString())) {
                    final SwingWorker w = new SwingWorker() {
                        @Override
                        protected Object doInBackground() throws Exception {
                            for (int i = 1; i <= 100; i++) {
                                try {
                                    if (i < 100) {
                                        setCursor(new Cursor(Cursor.WAIT_CURSOR));
                                    }
                                    if (i == 100) {
                                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    }
                                    if (i == 30) {
                                        progressoTabela.setToolTipText("Quase terminando");
                                    }

                                    progressoTabela.setValue(i);
                                    progressoTabela.setString(i + "%");
                                    Thread.sleep(tabelaVerProfessores.getRowCount());
                                } catch (InterruptedException ex) {
                                    ex.printStackTrace();
                                }
                            }
                            return 0;
                        }
                    };
                    if (linhas != tabelaVerProfessores.getRowCount() || tabelaVerProfessores.getRowCount() == 0) {
                        w.execute();
                    }
                    //Enquanto o cadastro for diferente do loop anterior..
                    if (i > 0 && matriculaAnterior != professor.getMatricula()) {
                        try {
                            //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        } catch (ArrayIndexOutOfBoundsException e) {
                            //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                            JTable t = new JTable(tabelaVerProfessores.getModel());
                            DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                            modelo.addRow(new Object[]{null, null});
                            //Preenche a linha vazia que foi criada
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        }
                        //Verifica se é a primeira passagem do loop
                    } else if (i == 0) {
                        try {
                            //Enquanto houver linhas suficientes na tabela..
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        } catch (ArrayIndexOutOfBoundsException e) {
                            //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                            JTable t = new JTable(tabelaVerProfessores.getModel());
                            DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                            modelo.addRow(new Object[]{null, null});
                            //Preenche a linha vazia que foi criada
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        }
                    } else if (matriculaAnterior == professor.getMatricula()) {
                        //decrementa em linhas se matricula for igual o da varredura anterior.
                        linhas--;
                    }

                    linhas++;
                    //Remove as linhas desnecessarias da tabela
                    while (tabelaVerProfessores.getRowCount() > linhas) {
                        JTable t = new JTable(tabelaVerProfessores.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.removeRow(tabelaVerProfessores.getRowCount() - linhas);
                    }
                    matriculaAnterior = professor.getMatricula();
                    //Remove todas as linhas da tabela
                } else if (escolhaEscola.getSelectedItem()
                        .equals("Escolha uma Escola")) {
                    progressoTabela.setValue(0);
                    progressoTabela.setString("0%");
                    JTable t = new JTable(tabelaVerProfessores.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(tabelaVerProfessores.getRowCount() - 1);
                    //modelo.removeRow(6);
                }
            }
        });

    }//GEN-LAST:event_escolhaEscolaActionPerformed

    private void nomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFocusGained
        if (nome.getText().equals("Nome completo")) {
            nome.setText("");
        }
    }//GEN-LAST:event_nomeFocusGained

    private void nomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFocusLost
        if (nome.getText().equals("")) {
            nome.setText("Nome completo");
        }
    }//GEN-LAST:event_nomeFocusLost

    private void enderecoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enderecoFocusGained
        if (endereco.getText().equals("Endereço")) {
            endereco.setText("");
        }
    }//GEN-LAST:event_enderecoFocusGained

    private void enderecoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enderecoFocusLost
        if (endereco.getText().equals("")) {
            endereco.setText("Endereço");
        }
    }//GEN-LAST:event_enderecoFocusLost

    private void matriculaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matriculaFocusGained
        if (matricula.getText().equals("Matricula")) {
            matricula.setText("");
        }
        if (matricula.getBackground().equals(Color.red)) {
            matricula.setBackground(Color.white);
            matricula.setForeground(Color.black);
        }
    }//GEN-LAST:event_matriculaFocusGained

    private void matriculaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matriculaFocusLost
        if (matricula.getText().equals("")) {
            matricula.setText("Matricula");
        }
    }//GEN-LAST:event_matriculaFocusLost

    private void dataDeAdimissaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDeAdimissaoFocusGained
        if (dataDeAdimissao.getText().equals("Data de Admissão")) {
            dataDeAdimissao.setText("");
        }
        if (dataDeAdimissao.getBackground().equals(Color.red)) {
            dataDeAdimissao.setBackground(Color.white);
            dataDeAdimissao.setForeground(Color.black);
        }
    }//GEN-LAST:event_dataDeAdimissaoFocusGained

    private void dataDeAdimissaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDeAdimissaoFocusLost
        if (dataDeAdimissao.getText().equals("")) {
            dataDeAdimissao.setText("Data de Admissão");
        }

        String dataEmUmFormato = dataDeAdimissao.getText();
        SimpleDateFormat formato = new SimpleDateFormat("ddMMyyyy");
        Date data = null;
        try {
            data = formato.parse(dataEmUmFormato);
            formato.applyPattern("dd/MM/yyyy");
            String dataFormatada = formato.format(data);
            dataDeAdimissao.setText(dataFormatada);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Por favor insira apenas numeros.\nFORMATO DA DATA: DD/MM/AAAA", "ERRO!", JOptionPane.WARNING_MESSAGE);
            dataDeAdimissao.setBackground(Color.red);
            Logger.getLogger(Main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_dataDeAdimissaoFocusLost

    private void salarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salarioFocusGained
        if (salario.getText().equals("Salario")) {
            salario.setText("");
        }
        if (salario.getBackground().equals(Color.red)) {
            salario.setBackground(Color.white);
            salario.setForeground(Color.black);
        }

    }//GEN-LAST:event_salarioFocusGained

    private void salarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salarioFocusLost
        if (salario.getText().equals("")) {
            salario.setText("Salario");
        }
    }//GEN-LAST:event_salarioFocusLost

    private void telefoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefoneFocusLost
        if (telefone.getText().equals("")) {
            telefone.setText("Telefone");
        }
    }//GEN-LAST:event_telefoneFocusLost

    private void telefoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefoneFocusGained
        if (telefone.getText().equals("Telefone")) {
            telefone.setText("");
        }
        if (telefone.getBackground().equals(Color.red)) {
            telefone.setBackground(Color.white);
            telefone.setForeground(Color.black);
        }
    }//GEN-LAST:event_telefoneFocusGained

    private void btnCadastrarSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarSetorActionPerformed
        try {
            Setor setor = new Setor(JOptionPane.showInputDialog("Insira o nome do setor:"));
            if (!setor.getNome().equals("")) {
                setorSeletor.addItem(setor.getNome());
                setorDB.add(setor);
                salvarDados(setorDB, "registroSetor.txt");
            } else {
                JOptionPane.showMessageDialog(null, "Invalido! Escreva o nome do setor", "ERRO!", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalido, por favor tente novamente", "ERRO!", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnCadastrarSetorActionPerformed

    private void btnSalvarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarCursoActionPerformed
        Curso curso = new Curso(cursosDB.size(), nomeCurso.getText(), escolasCurso.getSelectedItem().toString());
        for (int i = 0; i < cursosDB.size(); i++) {
            Curso novo = (Curso) cursosDB.get(i);
            if (nomeCurso.getText().equals(novo.getNome())) {
                JOptionPane.showMessageDialog(null, nomeCurso.getText() + " ja existe na base de dados!", "Curso ja existe!", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (nomeCurso.getText().equals("")) {
                return;
            }
        }
        cursosDB.add(curso);
        cursosSeletor.addItem(curso.getNome());
        cursosSeletorAluno.addItem(curso.getNome());
        salvarDados(cursosDB, "registroCurso.txt");
    }//GEN-LAST:event_btnSalvarCursoActionPerformed

    private void btnSalvarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarDisciplinasActionPerformed
        if (disciplinaDB.isEmpty()) {
            Disciplinas disciplina = new Disciplinas(disciplinaDB.size(), nomeDisciplina.getText(), cursosSeletor.getSelectedItem().toString());
            disciplinaDB.add(disciplina);
            DisciplinaSeletor.addItem(disciplina.getNome());
            salvarDados(disciplinaDB, "registroDisciplina.txt");
        } else {
            for (int i = 0; i < disciplinaDB.size(); i++) {
                Disciplinas novo = (Disciplinas) disciplinaDB.get(i);
                if (nomeDisciplina.getText().equals(novo.getNome())) {
                    JOptionPane.showMessageDialog(null, nomeDisciplina.getText() + " ja existe na base de dados!", "Disciplina ja existe!", JOptionPane.WARNING_MESSAGE);
                    return;
                } else if (nomeDisciplina.getText().equals("")) {
                    return;
                }
            }
            Disciplinas disciplina = new Disciplinas(disciplinaDB.size(), nomeDisciplina.getText(), cursosSeletor.getSelectedItem().toString());
            disciplinaDB.add(disciplina);
            DisciplinaSeletor.addItem(disciplina.getNome());
            salvarDados(disciplinaDB, "registroDisciplina.txt");
        }

    }//GEN-LAST:event_btnSalvarDisciplinasActionPerformed

    private void btnSalvarTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarTurmasActionPerformed
        if (turmasDB.isEmpty()) {
            Turmas turma = new Turmas(turmasDB.size(), nomeTurma.getText(), DisciplinaSeletor.getSelectedItem().toString(), ProfessorSeletor.getSelectedItem().toString());
            turmasDB.add(turma);
            salvarDados(turmasDB, "registroTurma.txt");
        } else {
            for (int i = 0; i < turmasDB.size(); i++) {
                Turmas novo = (Turmas) turmasDB.get(i);
                if (nomeTurma.getText().equals(novo.getNome())) {
                    JOptionPane.showMessageDialog(null, nomeTurma.getText() + " ja existe na base de dados!", "Turma ja existe!", JOptionPane.WARNING_MESSAGE);
                    return;
                } else if (nomeTurma.getText().equals("")) {
                    return;
                }
            }
            Turmas turma = new Turmas(turmasDB.size(), nomeTurma.getText(), DisciplinaSeletor.getSelectedItem().toString(), ProfessorSeletor.getSelectedItem().toString());
            turmasDB.add(turma);
            salvarDados(turmasDB, "registroTurma.txt");
        }
    }//GEN-LAST:event_btnSalvarTurmasActionPerformed

    private void menuGerarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGerarRelatorioActionPerformed

    }//GEN-LAST:event_menuGerarRelatorioActionPerformed

    private void relatorioProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioProfessoresActionPerformed
        relatorio.gerarPDF(professorDB, "Professor");
    }//GEN-LAST:event_relatorioProfessoresActionPerformed

    private void relatorioFuncionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioFuncionariosActionPerformed
        relatorio.gerarPDF(funcionarioDB, "Funcionario");
    }//GEN-LAST:event_relatorioFuncionariosActionPerformed

    private void relatorioAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioAlunosActionPerformed
        relatorio.gerarPDF(alunoDB, "Aluno");
    }//GEN-LAST:event_relatorioAlunosActionPerformed

    private void MenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_MenuItemSairActionPerformed

    private void MenuItemDelTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDelTudoActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR TODOS os registros?", "Deletar tudo!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION)
            if (deletar.todosRegistros())
            JOptionPane.showMessageDialog(null, "Deletado com sucesso");
    }//GEN-LAST:event_MenuItemDelTudoActionPerformed

    private void MenuItemProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemProfessorActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(professorDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os professores", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroProfessor.txt");
          professorDB = deletar.listaAtualizada;
          salvarDados(professorDB, "registroProfessor.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemProfessorActionPerformed

    private void MenuItemFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFuncActionPerformed
         if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(funcionarioDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os Funcionarios", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroAdm.txt");
          funcionarioDB = deletar.listaAtualizada;
          salvarDados(funcionarioDB, "registroAdm.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemFuncActionPerformed

    private void MenuItemAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAlunoActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(alunoDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os Alunos", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroAluno.txt");
          alunoDB = deletar.listaAtualizada;
          salvarDados(alunoDB, "registroAluno.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemAlunoActionPerformed

    private void MenuItemEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEscolaActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(escolasDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os Escolas", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroEscolas.txt");
          escolasDB = deletar.listaAtualizada;
          salvarDados(escolasDB, "registroEscolas.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemEscolaActionPerformed

    private void MenuItemCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCursoActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(cursosDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os Cursos", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroEscolas.txt");
          cursosDB = deletar.listaAtualizada;
          salvarDados(cursosDB, "registroEscolas.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemCursoActionPerformed

    private void MenuItemDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDiscActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(disciplinaDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os Disciplinas", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroDisciplina.txt");
          disciplinaDB = deletar.listaAtualizada;
          salvarDados(disciplinaDB, "registroDisciplina.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemDiscActionPerformed

    private void MenuItemTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemTurmaActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
          
            deletar.DeletFile(turmasDB, 
                  JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você deseja Excluir\n Digite: Tudo para excluir todos os Turmas", "Quem você deseja excluir?", JOptionPane.QUESTION_MESSAGE), 
                  "registroTurma.txt");
          turmasDB = deletar.listaAtualizada;
          salvarDados(turmasDB, "registroTurma.txt");
          reiniciarApp();
       
        }
    }//GEN-LAST:event_MenuItemTurmaActionPerformed

    private void editarProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarProfessorActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("professor");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            for (int i = 0; i < professorDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                professor = (Professor) professorDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != professor.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    }
                } else if (matriculaAnterior == professor.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                matriculaAnterior = professor.getMatricula();
                //Remove todas as linhas da tabela
            }
        });

    }//GEN-LAST:event_editarProfessorActionPerformed

    private void menuVerEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerEditarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuVerEditarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (btnEditar.getName().equals("professor")) {
            
            for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                professor = (Professor) professorDB.get(i);
                professor.setNome((String) TabelaEditar.getValueAt(i, 0));
                professor.setMatricula((int) TabelaEditar.getValueAt(i, 1));
                professor.setEndereco((String) TabelaEditar.getValueAt(i, 2));
                professor.setTelefone((int) TabelaEditar.getValueAt(i, 3));
                professorDB.remove(i);
                professorDB.add(i, professor);
            }
            salvarDados(professorDB, "registroProfessor.txt");
            JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } else if (btnEditar.getName().equals("aluno")) {
            for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                aluno = (Aluno) alunoDB.get(i);
                aluno.setNome((String) TabelaEditar.getValueAt(i, 0));
                aluno.setMatricula((int) TabelaEditar.getValueAt(i, 1));
                aluno.setEndereco((String) TabelaEditar.getValueAt(i, 2));
                aluno.setTelefone((int) TabelaEditar.getValueAt(i, 3));
                alunoDB.remove(i);
                alunoDB.add(i, aluno);
            }
            salvarDados(alunoDB, "registroAluno.txt");
            JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } else if (btnEditar.getName().equals("funcionario")) {
            for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                funcionario = (Funcionarios) funcionarioDB.get(i);
                funcionario.setNome((String) TabelaEditar.getValueAt(i, 0));
                funcionario.setMatricula((int) TabelaEditar.getValueAt(i, 1));
                funcionario.setEndereco((String) TabelaEditar.getValueAt(i, 2));
                funcionario.setTelefone((int) TabelaEditar.getValueAt(i, 3));
                funcionarioDB.remove(i);
                funcionarioDB.add(i, funcionario);
            }
            salvarDados(funcionarioDB, "registroAdm.txt");
            JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void editarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarAlunoActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("aluno");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;

            for (int i = 0; i < alunoDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                aluno = (Aluno) alunoDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != aluno.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    }
                } else if (matriculaAnterior == aluno.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }
                if (alunoDB.isEmpty()) {
                    while (TabelaEditar.getRowCount() > linhas) {
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                    }
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                matriculaAnterior = aluno.getMatricula();
                //Remove todas as linhas da tabela

            }
        });
    }//GEN-LAST:event_editarAlunoActionPerformed

    private void editarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarFuncionarioActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("funcionario");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            
            for (int i = 0; i < funcionarioDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                funcionario = (Funcionarios) funcionarioDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != funcionario.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    }
                } else if (matriculaAnterior == funcionario.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                matriculaAnterior = funcionario.getMatricula();
                
            }
        });
    }//GEN-LAST:event_editarFuncionarioActionPerformed

    private void frameEditorPessoasWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frameEditorPessoasWindowClosed
    }//GEN-LAST:event_frameEditorPessoasWindowClosed

    private void btnCalcelarEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcelarEditarActionPerformed
       //Colocando a janela em segundo plano
        frameEditorPessoas.toBack();
    }//GEN-LAST:event_btnCalcelarEditarActionPerformed

    //METODO PARA REINICIALIZAR O PROGRAMA
    private void reiniciarApp() {
        
        StringBuilder cmd = new StringBuilder();
        cmd.append(System.getProperty("java.home") + File.separator + "bin" + File.separator + "java ");
        for (String jvmArg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
            cmd.append(jvmArg + " ");
        }
        cmd.append("-cp ").append(ManagementFactory.getRuntimeMXBean().getClassPath()).append(" ");
        cmd.append(Main.class.getName()).append(" ");
        for (String arg : ar) {
            cmd.append(arg).append(" ");
        }
        try {
            Runtime.getRuntime().exec(cmd.toString());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
         ar = args;
        /* Create and display the form */
        //RECUPERANDO TODOS OS DADOS SALVOS
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
            Gson gson = new Gson();
            //Recupera professores
            java.lang.reflect.Type tipoProf = new TypeToken<ArrayList<Professor>>() {
            }.getType();
            ReadFile("registroProfessor.txt").forEach((s) -> {
                professorDB = gson.fromJson(s, tipoProf);
                for (int i = 0; i < professorDB.size(); i++) {
                    Professor professor = (Professor) professorDB.get(i);
                    ProfessorSeletor.addItem(professor.getNome());
                }
            });
            //Recupera Alunos
            java.lang.reflect.Type tipoAluno = new TypeToken<ArrayList<Aluno>>() {
            }.getType();
            ReadFile("registroAluno.txt").forEach((s) -> {
                alunoDB = gson.fromJson(s, tipoAluno);
                /*for (int i = 0; i < alunoDB.size(); i++) {
                
                }*/
            });
            //Recupera Curso
            java.lang.reflect.Type tipoCurso = new TypeToken<ArrayList<Curso>>() {
            }.getType();
            ReadFile("registroCurso.txt").forEach((s) -> {
                cursosDB = gson.fromJson(s, tipoCurso);
                for (int i = 0; i < cursosDB.size(); i++) {
                    Curso curso = (Curso) cursosDB.get(i);
                    cursosSeletor.addItem(curso.getNome());
                    cursosSeletorAluno.addItem(curso.getNome());

                }
            });
            //Recupera disciplinas
            java.lang.reflect.Type tipoDisciplina = new TypeToken<ArrayList<Disciplinas>>() {
            }.getType();
            ReadFile("registroDisciplina.txt").forEach((s) -> {
                disciplinaDB = gson.fromJson(s, tipoDisciplina);
                for (int i = 0; i < disciplinaDB.size(); i++) {
                    Disciplinas disciplina = (Disciplinas) disciplinaDB.get(i);
                    DisciplinaSeletor.addItem(disciplina.getNome());
                }
            });
            //Recupera turmas
            java.lang.reflect.Type tipoTurma = new TypeToken<ArrayList<Turmas>>() {
            }.getType();
            ReadFile("registroTurma.txt").forEach((s) -> {
                turmasDB = gson.fromJson(s, tipoTurma);
            });
            //Recupera setor
            java.lang.reflect.Type tipoSetor = new TypeToken<ArrayList<Setor>>() {
            }.getType();
            ReadFile("registroSetor.txt").forEach((s) -> {
                setorDB = gson.fromJson(s, tipoSetor);
                for (int i = 0; i < setorDB.size(); i++) {
                    Setor setor = (Setor) setorDB.get(i);
                    setorSeletor.addItem(setor.getNome());
                }
            });
            //Recupera Adm
            java.lang.reflect.Type tipoAdm = new TypeToken<ArrayList<Administrativo>>() {
            }.getType();
            ReadFile("registroAdm.txt").forEach((s) -> {
                funcionarioDB = gson.fromJson(s, tipoAdm);
            });
            //Recupera Escolas
            java.lang.reflect.Type tipoEscolas = new TypeToken<ArrayList<Escolas>>() {
            }.getType();
            ReadFile("registroEscolas.txt").stream().map((e) -> {
                escolasDB = gson.fromJson(e, tipoEscolas);
                return e;
            }).filter((_item) -> (!escolasDB.isEmpty())).map((_item) -> "").forEachOrdered((aux) -> {
                for (int i = 0; i < escolasDB.size(); i++) {
                    Escolas novo = (Escolas) escolasDB.get(i);
                    if (aux.equals(novo.getNome())) {
                    } else {
                        escolhaEscola.addItem(novo.getNome());
                        escolas.addItem(novo.getNome());
                        escolasCurso.addItem(novo.getNome());
                    }
                    aux = novo.getNome();
                }
            });
        });
    }
//Variaveis da interface grafica
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox<String> DisciplinaSeletor;
    private javax.swing.JMenu MenuGerarRelatorio;
    private javax.swing.JMenuItem MenuItemAluno;
    private javax.swing.JMenuItem MenuItemCurso;
    private javax.swing.JMenuItem MenuItemDelTudo;
    private javax.swing.JMenuItem MenuItemDisc;
    private javax.swing.JMenuItem MenuItemEscola;
    private javax.swing.JMenuItem MenuItemFunc;
    private javax.swing.JMenuItem MenuItemProfessor;
    private javax.swing.JMenuItem MenuItemSair;
    private javax.swing.JMenuItem MenuItemTurma;
    private static javax.swing.JComboBox<String> ProfessorSeletor;
    private javax.swing.JTable TabelaEditar;
    private javax.swing.JButton btnCadastrarSetor;
    private javax.swing.JButton btnCalcelarEditar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarCurso;
    private javax.swing.JButton btnSalvarDisciplinas;
    private javax.swing.JButton btnSalvarEscola;
    private javax.swing.JButton btnSalvarTurmas;
    private static javax.swing.JComboBox<String> cursosSeletor;
    private static javax.swing.JComboBox<String> cursosSeletorAluno;
    private javax.swing.JTextField dataDeAdimissao;
    private javax.swing.JMenuItem editarAluno;
    private javax.swing.JMenuItem editarFuncionario;
    private javax.swing.JMenuItem editarProfessor;
    private javax.swing.JTextField endereco;
    private static javax.swing.JComboBox<String> escolas;
    private static javax.swing.JComboBox<String> escolasCurso;
    private javax.swing.JComboBox<String> escolha;
    private static javax.swing.JComboBox<String> escolhaEscola;
    private javax.swing.JFrame frameEditorPessoas;
    private javax.swing.JLabel imgCadastroDePessoas;
    private javax.swing.JLabel imgCursos;
    private javax.swing.JLabel imgDisciplinas;
    private javax.swing.JLabel imgEscola;
    private javax.swing.JLabel imgTurmas;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparador;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField matricula;
    private javax.swing.JMenuBar menuBarPrincipal;
    private javax.swing.JMenu menuDeletarRegistros;
    private javax.swing.JMenu menuGerarRelatorio;
    private javax.swing.JMenu menuVerEditar;
    private javax.swing.JTextField nome;
    private javax.swing.JTextField nomeCurso;
    private javax.swing.JTextField nomeDisciplina;
    private javax.swing.JTextField nomeEscola;
    private javax.swing.JTextField nomeTurma;
    private javax.swing.JInternalFrame painelEditar;
    private javax.swing.JTabbedPane painelTabsPrincipal;
    private javax.swing.JProgressBar progressoTabela;
    private javax.swing.JMenuItem relatorioAlunos;
    private javax.swing.JMenuItem relatorioFuncionarios;
    private javax.swing.JMenuItem relatorioProfessores;
    private javax.swing.JTextField salario;
    private static javax.swing.JComboBox<String> setorSeletor;
    private javax.swing.JPanel tabCadastroEscolas;
    private javax.swing.JPanel tabCadastroProfFun;
    private javax.swing.JPanel tabCurso;
    private javax.swing.JPanel tabDisciplinas;
    private javax.swing.JPanel tabTurmas;
    private javax.swing.JTable tabelaVerProfessores;
    private javax.swing.JTextField telefone;
    private javax.swing.JLabel txtCadastrarEscola;
    private javax.swing.JLabel txtCadastroDePessoas;
    private javax.swing.JLabel txtCurso;
    private javax.swing.JLabel txtDesenvolvedor;
    private javax.swing.JLabel txtDisciplinas;
    private javax.swing.JLabel txtEscolhaCurso;
    private javax.swing.JLabel txtEscolhaDisciplina;
    private javax.swing.JLabel txtEscolhaEscola;
    private javax.swing.JLabel txtEscolhaProfessor;
    private javax.swing.JLabel txtEscolhaSetor;
    private javax.swing.JLabel txtListarProfessores;
    private javax.swing.JLabel txtQuemVoceQuerCadastrar;
    private javax.swing.JLabel txtTurmas;
    // End of variables declaration//GEN-END:variables
    //Objetos
    GerarRelatorio relatorio = new GerarRelatorio();
    DeletarRegistros deletar = new DeletarRegistros();
    Professor professor;
    Administrativo administrativo;
    Funcionarios funcionario;
    Aluno aluno;
    Professor anterior;
    //Strings
    private String exibeCadastro = "";
    private static String[] ar;
    //Arrays
    public static ArrayList professorDB = new ArrayList();
    public static ArrayList funcionarioDB = new ArrayList();
    public static ArrayList alunoDB = new ArrayList();
    public static ArrayList escolasDB = new ArrayList();
    public static ArrayList cursosDB = new ArrayList();
    public static ArrayList disciplinaDB = new ArrayList();
    public static ArrayList turmasDB = new ArrayList();
    public static ArrayList setorDB = new ArrayList();
    //Variaveis do tipo primitivo
    private int dataAdimicao;
    private int matriculaFunc;
    private float salarioFunc;
    private int telefoneFunc;
}
