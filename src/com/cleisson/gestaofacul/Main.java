/*
 * GNU GENERAL PUBLIC LICENSE
 *  Version 3, 29 June 2007
 */
package com.cleisson.gestaofacul;

import com.cleisson.gestaofacul.util.VerificaErro;
import com.cleisson.gestaofacul.util.GerenciaRegistros;
import com.cleisson.gestaofacul.modelos.Aluno;
import com.cleisson.gestaofacul.modelos.Professor;
import com.cleisson.gestaofacul.modelos.Disciplinas;
import com.cleisson.gestaofacul.modelos.Administrativo;
import com.cleisson.gestaofacul.modelos.Setor;
import com.cleisson.gestaofacul.modelos.Turmas;
import com.cleisson.gestaofacul.modelos.Curso;
import com.cleisson.gestaofacul.modelos.Funcionarios;
import com.cleisson.gestaofacul.modelos.Escolas;
import com.cleisson.gestaofacul.util.GerarRelatorio;
import static com.cleisson.gestaofacul.util.GerenciaArmazenamento.ReadFile;
import static com.cleisson.gestaofacul.util.GerenciaArmazenamento.WriteFile;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import java.net.URISyntaxException;

/**
 * classe principal com a interface
 * @author Cleisson Barbosa
 * @version 1.1.4
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameEditorPessoas = new javax.swing.JFrame();
        painelEditar = new javax.swing.JInternalFrame();
        painelEditar.setEnabled(false);
        btnEditar = new javax.swing.JButton();
        btnCalcelarEditar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TabelaEditar = new javax.swing.JTable();
        frameSelecionarAlunos = new javax.swing.JFrame();
        frameSelecionarAlunos.setVisible(false);
        painelSelecionarAlunos = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaSelecionarAlunos = new javax.swing.JTable();
        btnSelecionarAluno = new javax.swing.JButton();
        btnCalcelarSelecaoAluno = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        painelAEsquerda = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        txtTituloApp = new javax.swing.JLabel();
        btnTabPessoas = new javax.swing.JButton();
        btnTabEscolas = new javax.swing.JButton();
        btnTabCursos = new javax.swing.JButton();
        btnTabDiaciplinas = new javax.swing.JButton();
        btnTabTurmas = new javax.swing.JButton();
        btnSairEsq = new javax.swing.JButton();
        btnSobre = new javax.swing.JButton();
        txtDesenvolvedor = new javax.swing.JLabel();
        jSeparador = new javax.swing.JSeparator();
        txtVoceEstaUsando = new javax.swing.JLabel();
        txtgetSo = new javax.swing.JLabel();
        txtgetSo.setText(System.getProperty("os.name", "Não encontrado"));
        txtArquitetura = new javax.swing.JLabel();
        txtSetArquitetura = new javax.swing.JLabel();
        txtSetArquitetura.setText(System.getProperty("os.arch", "Não encontrada"));

        txtNomeUsuario = new javax.swing.JLabel();
        txtNomeUsuario.setText(System.getProperty("user.name", "Não encontrado"));

        txtUsuario = new javax.swing.JLabel();
        painelADireita = new javax.swing.JPanel();
        tabCadastroProfFun = new javax.swing.JPanel();
        tabCadastroProfFun.setVisible(false);
        nome = new javax.swing.JTextField();
        matricula = new javax.swing.JTextField();
        endereco = new javax.swing.JTextField();
        salario = new javax.swing.JTextField();
        dataDeAdimissao = new javax.swing.JTextField();
        telefone = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        escolha = new javax.swing.JComboBox<>();
        txtQuemVoceQuerCadastrar = new javax.swing.JLabel();
        escolas = new javax.swing.JComboBox<>();

        setorSeletor = new javax.swing.JComboBox<>();
        this.setorSeletor.setEnabled(false);
        txtEscolhaEscola = new javax.swing.JLabel();
        btnCadastrarSetor = new javax.swing.JButton();
        this.btnCadastrarSetor.setEnabled(false);
        cursosSeletorAluno = new javax.swing.JComboBox<>();
        this.cursosSeletorAluno.setEnabled(false);
        txtEscolhaSetor = new javax.swing.JLabel();
        this.txtEscolhaSetor.setEnabled(false);
        txtEscolhaCurso = new javax.swing.JLabel();
        this.txtEscolhaCurso.setEnabled(false);
        jPanel3 = new javax.swing.JPanel();
        txtCadastroDePessoas = new javax.swing.JLabel();
        imgCadastroDePessoas = new javax.swing.JLabel();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        backgroundCabeçalho4 = new javax.swing.JLabel();
        IconePessoa = new javax.swing.JLabel();
        tabCadastroEscolas = new javax.swing.JPanel();
        tabCadastroEscolas.setVisible(false);
        escolhaEscola = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVerProfessores = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        progressoTabela = new javax.swing.JProgressBar();
        txtListarProfessores = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        imgEscola = new javax.swing.JLabel();
        nomeEscola = new javax.swing.JTextField();
        btnSalvarEscola = new javax.swing.JButton();
        txtCadastrarEscola = new javax.swing.JLabel();
        jLayeredPane6 = new javax.swing.JLayeredPane();
        backgroundCabeçalho3 = new javax.swing.JLabel();
        tabCurso = new javax.swing.JPanel();
        tabCurso.setVisible(false);
        nomeCurso = new javax.swing.JTextField();
        escolasCurso = new javax.swing.JComboBox<>();
        btnSalvarCurso = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        txtTurmas2 = new javax.swing.JLabel();
        imgTurmas2 = new javax.swing.JLabel();
        backgroundCabeçalho2 = new javax.swing.JLabel();
        txtSelecionarEscolaCurso = new javax.swing.JLabel();
        tabDisciplinas = new javax.swing.JPanel();
        tabDisciplinas.setVisible(false);
        nomeDisciplina = new javax.swing.JTextField();
        cursosSeletor = new javax.swing.JComboBox<>();
        btnSalvarDisciplinas = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        txtTurmas1 = new javax.swing.JLabel();
        imgTurmas1 = new javax.swing.JLabel();
        backgroundCabeçalho1 = new javax.swing.JLabel();
        txtEscolhaCursoDisciplina = new javax.swing.JLabel();
        tabTurmas = new javax.swing.JPanel();
        tabTurmas.setVisible(false);
        nomeTurma = new javax.swing.JTextField();
        DisciplinaSeletor = new javax.swing.JComboBox<>();
        btnSalvarTurmas = new javax.swing.JButton();
        ProfessorSeletor = new javax.swing.JComboBox<>();
        txtEscolhaDisciplina = new javax.swing.JLabel();
        txtEscolhaProfessor = new javax.swing.JLabel();
        txtAlunosParticipantesTurmas = new javax.swing.JLabel();
        btnSelecionarAlunos = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        txtTurmas = new javax.swing.JLabel();
        imgTurmas = new javax.swing.JLabel();
        backgroundCabeçalho = new javax.swing.JLabel();
        backGround = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        menuBarPrincipal = new javax.swing.JMenuBar();
        MenuGerarRelatorio = new javax.swing.JMenu();
        menuGerarRelatorio = new javax.swing.JMenu();
        relatorioProfessores = new javax.swing.JMenuItem();
        relatorioFuncionarios = new javax.swing.JMenuItem();
        relatorioAlunos = new javax.swing.JMenuItem();
        relatorioescolas = new javax.swing.JMenuItem();
        relatorioCursos = new javax.swing.JMenuItem();
        relatorioDisciplinas = new javax.swing.JMenuItem();
        relatorioTurmas = new javax.swing.JMenuItem();
        menuDeletarRegistros = new javax.swing.JMenu();
        MenuItemDelTudo = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        MenuItemProfessor = new javax.swing.JMenuItem();
        MenuItemFunc = new javax.swing.JMenuItem();
        MenuItemAluno = new javax.swing.JMenuItem();
        MenuItemEscola = new javax.swing.JMenuItem();
        MenuItemCurso = new javax.swing.JMenuItem();
        MenuItemDisc = new javax.swing.JMenuItem();
        MenuItemTurma = new javax.swing.JMenuItem();
        MenuItemSair = new javax.swing.JMenuItem();
        menuVerEditar = new javax.swing.JMenu();
        editarProfessor = new javax.swing.JMenuItem();
        editarAluno = new javax.swing.JMenuItem();
        editarFuncionario = new javax.swing.JMenuItem();
        editarEscolas = new javax.swing.JMenuItem();
        editarCursos = new javax.swing.JMenuItem();
        editarDisciplinas = new javax.swing.JMenuItem();
        editarTurmas = new javax.swing.JMenuItem();

        frameEditorPessoas.setMinimumSize(new java.awt.Dimension(700, 500));
        frameEditorPessoas.setResizable(false);
        frameEditorPessoas.setSize(new java.awt.Dimension(690, 500));
        frameEditorPessoas.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                frameEditorPessoasWindowClosed(evt);
            }
        });

        painelEditar.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        painelEditar.setTitle("Ver e/ou Editar os Registros");
        painelEditar.setAutoscrolls(true);
        painelEditar.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/editarImagem.png"))); // NOI18N
        painelEditar.setVisible(true);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/aplicarImagem.png"))); // NOI18N
        btnEditar.setText("Salvar Edição");
        btnEditar.setName(""); // NOI18N
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnCalcelarEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cancelarImagem.png"))); // NOI18N
        btnCalcelarEditar.setText("Cancelar");
        btnCalcelarEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcelarEditarActionPerformed(evt);
            }
        });

        TabelaEditar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Matricula", "Endereço", "Telefone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TabelaEditar);
        if (TabelaEditar.getColumnModel().getColumnCount() > 0) {
            TabelaEditar.getColumnModel().getColumn(0).setPreferredWidth(150);
            TabelaEditar.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        javax.swing.GroupLayout painelEditarLayout = new javax.swing.GroupLayout(painelEditar.getContentPane());
        painelEditar.getContentPane().setLayout(painelEditarLayout);
        painelEditarLayout.setHorizontalGroup(
            painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEditarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelEditarLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCalcelarEditar))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelEditarLayout.setVerticalGroup(
            painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelEditarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelEditarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnCalcelarEditar))
                .addContainerGap())
        );

        javax.swing.GroupLayout frameEditorPessoasLayout = new javax.swing.GroupLayout(frameEditorPessoas.getContentPane());
        frameEditorPessoas.getContentPane().setLayout(frameEditorPessoasLayout);
        frameEditorPessoasLayout.setHorizontalGroup(
            frameEditorPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameEditorPessoasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelEditar)
                .addContainerGap())
        );
        frameEditorPessoasLayout.setVerticalGroup(
            frameEditorPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameEditorPessoasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelEditar)
                .addGap(21, 21, 21))
        );

        frameSelecionarAlunos.setTitle("Selecionar Alunos");
        frameSelecionarAlunos.setMinimumSize(frameEditorPessoas.getMinimumSize());
        frameSelecionarAlunos.setName("Selecionar Alunos"); // NOI18N
        frameSelecionarAlunos.setResizable(false);
        frameSelecionarAlunos.setSize(new java.awt.Dimension(690, 500));

        painelSelecionarAlunos.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        painelSelecionarAlunos.setTitle("Selecione os alunos desta turma");
        painelSelecionarAlunos.setAutoscrolls(true);
        painelSelecionarAlunos.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        painelSelecionarAlunos.setVisible(true);

        tabelaSelecionarAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome do aluno", "Matricula"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaSelecionarAlunos);
        if (tabelaSelecionarAlunos.getColumnModel().getColumnCount() > 0) {
            tabelaSelecionarAlunos.getColumnModel().getColumn(0).setPreferredWidth(350);
        }

        btnSelecionarAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/aplicarImagem.png"))); // NOI18N
        btnSelecionarAluno.setText("Aplicar");
        btnSelecionarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarAlunoActionPerformed(evt);
            }
        });

        btnCalcelarSelecaoAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cancelarImagem.png"))); // NOI18N
        btnCalcelarSelecaoAluno.setText("Cancelar");
        btnCalcelarSelecaoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcelarSelecaoAlunoActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Selecione TODOS os alunos que fazem parte desta turma e clique em aplicar ->");

        javax.swing.GroupLayout painelSelecionarAlunosLayout = new javax.swing.GroupLayout(painelSelecionarAlunos.getContentPane());
        painelSelecionarAlunos.getContentPane().setLayout(painelSelecionarAlunosLayout);
        painelSelecionarAlunosLayout.setHorizontalGroup(
            painelSelecionarAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelSelecionarAlunosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(btnSelecionarAluno)
                .addGap(27, 27, 27)
                .addComponent(btnCalcelarSelecaoAluno)
                .addGap(34, 34, 34))
        );
        painelSelecionarAlunosLayout.setVerticalGroup(
            painelSelecionarAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSelecionarAlunosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(painelSelecionarAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelecionarAluno)
                    .addComponent(btnCalcelarSelecaoAluno)
                    .addComponent(jLabel1))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout frameSelecionarAlunosLayout = new javax.swing.GroupLayout(frameSelecionarAlunos.getContentPane());
        frameSelecionarAlunos.getContentPane().setLayout(frameSelecionarAlunosLayout);
        frameSelecionarAlunosLayout.setHorizontalGroup(
            frameSelecionarAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelSelecionarAlunos)
        );
        frameSelecionarAlunosLayout.setVerticalGroup(
            frameSelecionarAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelSelecionarAlunos)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Gestão - Projeto da disciplina P.O.O");
        setBackground(java.awt.SystemColor.controlLtHighlight);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setLocation(new java.awt.Point(150, 150));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(700, 500));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(980, 532));
        setResizable(false);
        setSize(new java.awt.Dimension(690, 500));

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setPreferredSize(new java.awt.Dimension(980, 500));

        painelAEsquerda.setBackground(new java.awt.Color(28, 31, 39));
        painelAEsquerda.setPreferredSize(new java.awt.Dimension(252, 500));
        painelAEsquerda.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                painelAEsquerdaMouseDragged(evt);
            }
        });
        painelAEsquerda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                painelAEsquerdaMousePressed(evt);
            }
        });

        txtTituloApp.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        txtTituloApp.setForeground(new java.awt.Color(255, 255, 255));
        txtTituloApp.setText("Gestão Universidade");

        btnTabPessoas.setBackground(new java.awt.Color(39, 39, 39));
        btnTabPessoas.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        btnTabPessoas.setForeground(new java.awt.Color(255, 255, 255));
        btnTabPessoas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/pessoasIconeBranco.png"))); // NOI18N
        btnTabPessoas.setText("Cadastrar Pessoas");
        btnTabPessoas.setBorder(null);
        btnTabPessoas.setContentAreaFilled(false);
        btnTabPessoas.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnTabPessoas.setIconTextGap(20);
        btnTabPessoas.setOpaque(true);
        btnTabPessoas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabPessoasActionPerformed(evt);
            }
        });

        btnTabEscolas.setBackground(btnTabPessoas.getBackground());
        btnTabEscolas.setFont(btnTabPessoas.getFont());
        btnTabEscolas.setForeground(new java.awt.Color(255, 255, 255));
        btnTabEscolas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/escolasIconeBranco.png"))); // NOI18N
        btnTabEscolas.setText("Cadastrar Escolas");
        btnTabEscolas.setBorder(null);
        btnTabEscolas.setContentAreaFilled(false);
        btnTabEscolas.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnTabEscolas.setIconTextGap(20);
        btnTabEscolas.setOpaque(true);
        btnTabEscolas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabEscolasActionPerformed(evt);
            }
        });

        btnTabCursos.setBackground(btnTabPessoas.getBackground());
        btnTabCursos.setFont(btnTabPessoas.getFont());
        btnTabCursos.setForeground(new java.awt.Color(255, 255, 255));
        btnTabCursos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/CursoIconeBranco.png"))); // NOI18N
        btnTabCursos.setText("Cadastrar Cursos");
        btnTabCursos.setBorder(null);
        btnTabCursos.setContentAreaFilled(false);
        btnTabCursos.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnTabCursos.setIconTextGap(20);
        btnTabCursos.setOpaque(true);
        btnTabCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabCursosActionPerformed(evt);
            }
        });

        btnTabDiaciplinas.setBackground(btnTabPessoas.getBackground());
        btnTabDiaciplinas.setFont(btnTabPessoas.getFont());
        btnTabDiaciplinas.setForeground(new java.awt.Color(255, 255, 255));
        btnTabDiaciplinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinaIconeBranco.png"))); // NOI18N
        btnTabDiaciplinas.setText("Cadastrar Disciplinas");
        btnTabDiaciplinas.setBorder(null);
        btnTabDiaciplinas.setContentAreaFilled(false);
        btnTabDiaciplinas.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnTabDiaciplinas.setIconTextGap(20);
        btnTabDiaciplinas.setOpaque(true);
        btnTabDiaciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabDiaciplinasActionPerformed(evt);
            }
        });

        btnTabTurmas.setBackground(btnTabPessoas.getBackground());
        btnTabTurmas.setFont(btnTabPessoas.getFont());
        btnTabTurmas.setForeground(new java.awt.Color(255, 255, 255));
        btnTabTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasIconeBranco.png"))); // NOI18N
        btnTabTurmas.setText("Cadastrar Turmas");
        btnTabTurmas.setBorder(null);
        btnTabTurmas.setContentAreaFilled(false);
        btnTabTurmas.setIconTextGap(20);
        btnTabTurmas.setOpaque(true);
        btnTabTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabTurmasActionPerformed(evt);
            }
        });

        btnSairEsq.setBackground(new java.awt.Color(255, 51, 51));
        btnSairEsq.setFont(btnTabPessoas.getFont());
        btnSairEsq.setForeground(new java.awt.Color(255, 255, 255));
        btnSairEsq.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/sairImagem.png"))); // NOI18N
        btnSairEsq.setText("Sair");
        btnSairEsq.setBorder(null);
        btnSairEsq.setContentAreaFilled(false);
        btnSairEsq.setIconTextGap(10);
        btnSairEsq.setOpaque(true);
        btnSairEsq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairEsqActionPerformed(evt);
            }
        });

        btnSobre.setBackground(new java.awt.Color(102, 153, 255));
        btnSobre.setFont(btnTabPessoas.getFont());
        btnSobre.setForeground(new java.awt.Color(255, 255, 255));
        btnSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/selecionarImagem.png"))); // NOI18N
        btnSobre.setText("Sobre");
        btnSobre.setBorder(null);
        btnSobre.setContentAreaFilled(false);
        btnSobre.setIconTextGap(20);
        btnSobre.setOpaque(true);
        btnSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSobreActionPerformed(evt);
            }
        });

        txtDesenvolvedor.setForeground(new java.awt.Color(255, 255, 255));
        txtDesenvolvedor.setText("Desenvolvido por: Cleisson B.");

        txtVoceEstaUsando.setForeground(new java.awt.Color(255, 255, 255));
        txtVoceEstaUsando.setText("Você esta usando:");

        txtgetSo.setForeground(new java.awt.Color(255, 255, 255));

        txtArquitetura.setForeground(new java.awt.Color(255, 255, 255));
        txtArquitetura.setText("Arquitetura:");

        txtSetArquitetura.setForeground(new java.awt.Color(255, 255, 255));

        txtNomeUsuario.setForeground(new java.awt.Color(255, 255, 255));

        txtUsuario.setForeground(new java.awt.Color(255, 255, 255));
        txtUsuario.setText("Usuario:");

        javax.swing.GroupLayout painelAEsquerdaLayout = new javax.swing.GroupLayout(painelAEsquerda);
        painelAEsquerda.setLayout(painelAEsquerdaLayout);
        painelAEsquerdaLayout.setHorizontalGroup(
            painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnTabPessoas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnTabEscolas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnTabDiaciplinas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnTabTurmas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnTabCursos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAEsquerdaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAEsquerdaLayout.createSequentialGroup()
                                .addComponent(txtTituloApp)
                                .addGap(35, 35, 35))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAEsquerdaLayout.createSequentialGroup()
                                .addComponent(txtDesenvolvedor)
                                .addGap(49, 49, 49))))
                    .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                        .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparador)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAEsquerdaLayout.createSequentialGroup()
                                .addComponent(btnSairEsq, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(btnSobre, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                        .addComponent(txtArquitetura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSetArquitetura, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                        .addComponent(txtVoceEstaUsando)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtgetSo))
                    .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                        .addComponent(txtUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        painelAEsquerdaLayout.setVerticalGroup(
            painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAEsquerdaLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(txtTituloApp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTabPessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTabEscolas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTabCursos, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTabDiaciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTabTurmas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVoceEstaUsando)
                    .addComponent(txtgetSo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtArquitetura)
                    .addComponent(txtSetArquitetura, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUsuario)
                    .addComponent(txtNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelAEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSairEsq, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSobre, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtDesenvolvedor)
                .addGap(19, 19, 19))
        );

        painelADireita.setBackground(new java.awt.Color(255, 255, 255));
        painelADireita.setPreferredSize(new java.awt.Dimension(748, 500));

        tabCadastroProfFun.setBackground(new java.awt.Color(255, 255, 255));

        nome.setText("Nome completo");
        nome.setToolTipText("Informe o nome completo");
        nome.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nome.setName(""); // NOI18N
        nome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nomeFocusLost(evt);
            }
        });

        matricula.setText("Matricula");
        matricula.setToolTipText("Insira apenas numeros");
        matricula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                matriculaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                matriculaFocusLost(evt);
            }
        });
        matricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaActionPerformed(evt);
            }
        });

        endereco.setText("Endereço");
        endereco.setToolTipText("Informe o endereço completo");
        endereco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enderecoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enderecoFocusLost(evt);
            }
        });

        salario.setText("Salario");
        salario.setToolTipText("Informe o salario, é permitido o uso de virgula e ponto");
        salario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                salarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                salarioFocusLost(evt);
            }
        });

        dataDeAdimissao.setText("Data de Admissão");
        dataDeAdimissao.setToolTipText("Insira apenas numeros");
        dataDeAdimissao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dataDeAdimissaoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dataDeAdimissaoFocusLost(evt);
            }
        });

        telefone.setText("Telefone");
        telefone.setToolTipText("Insira apenas numeros");
        telefone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                telefoneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                telefoneFocusLost(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(255, 255, 255));
        btnSalvar.setFont(new java.awt.Font("Tekton Pro Cond", 0, 18)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(55, 38, 91));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setBorder(btnCadastrarSetor.getBorder());
        btnSalvar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSalvar.setIconTextGap(8);
        btnSalvar.setName(""); // NOI18N
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        escolha.setBackground(new java.awt.Color(55, 38, 91));
        escolha.setFont(escolas.getFont());
        escolha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Professores", "Funcionarios", "Alunos" }));
        escolha.setBorder(null);
        escolha.setOpaque(false);
        escolha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaActionPerformed(evt);
            }
        });

        txtQuemVoceQuerCadastrar.setText("Quem você quer cadastrar?");

        escolas.setBackground(new java.awt.Color(55, 38, 91));
        escolas.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N

        setorSeletor.setBackground(new java.awt.Color(55, 38, 91));
        setorSeletor.setFont(escolas.getFont());
        setorSeletor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setorSeletorActionPerformed(evt);
            }
        });

        txtEscolhaEscola.setText("Escolha a escola:");

        btnCadastrarSetor.setBackground(new java.awt.Color(255, 255, 255));
        btnCadastrarSetor.setForeground(new java.awt.Color(55, 38, 91));
        btnCadastrarSetor.setText("Cadastrar setor");
        btnCadastrarSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarSetorActionPerformed(evt);
            }
        });

        cursosSeletorAluno.setBackground(new java.awt.Color(55, 38, 91));
        cursosSeletorAluno.setFont(escolas.getFont());

        txtEscolhaSetor.setText("Escolha o Setor:");

        txtEscolhaCurso.setText("Escolha o Curso:");

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        txtCadastroDePessoas.setBackground(new java.awt.Color(255, 255, 255));
        txtCadastroDePessoas.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        txtCadastroDePessoas.setForeground(new java.awt.Color(255, 255, 255));
        txtCadastroDePessoas.setText("Cadastro de pessoas");

        imgCadastroDePessoas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/CadastroImagem.png"))); // NOI18N

        backgroundCabeçalho4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundCabeçalho4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cabeçalhoGif.gif"))); // NOI18N
        backgroundCabeçalho4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        backgroundCabeçalho4.setIconTextGap(400);
        backgroundCabeçalho4.setMaximumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho4.setMinimumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho4.setPreferredSize(new java.awt.Dimension(0, 0));

        jLayeredPane7.setLayer(backgroundCabeçalho4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane7Layout = new javax.swing.GroupLayout(jLayeredPane7);
        jLayeredPane7.setLayout(jLayeredPane7Layout);
        jLayeredPane7Layout.setHorizontalGroup(
            jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundCabeçalho4, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
        );
        jLayeredPane7Layout.setVerticalGroup(
            jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundCabeçalho4, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imgCadastroDePessoas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCadastroDePessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane7))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(txtCadastroDePessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imgCadastroDePessoas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane7, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        IconePessoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N

        javax.swing.GroupLayout tabCadastroProfFunLayout = new javax.swing.GroupLayout(tabCadastroProfFun);
        tabCadastroProfFun.setLayout(tabCadastroProfFunLayout);
        tabCadastroProfFunLayout.setHorizontalGroup(
            tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroProfFunLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(matricula, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addComponent(dataDeAdimissao, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(salario, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addComponent(txtEscolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(163, 163, 163)
                        .addComponent(txtEscolhaSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addComponent(escolas, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(setorSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtEscolhaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cursosSeletorAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(btnSalvar)
                        .addGap(191, 191, 191)
                        .addComponent(btnCadastrarSetor)))
                .addContainerGap())
            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(txtQuemVoceQuerCadastrar)
                .addGap(10, 10, 10)
                .addComponent(escolha, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(IconePessoa)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        tabCadastroProfFunLayout.setVerticalGroup(
            tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(txtQuemVoceQuerCadastrar))
                    .addComponent(escolha)
                    .addComponent(IconePessoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataDeAdimissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEscolhaEscola)
                    .addComponent(txtEscolhaSetor))
                .addGap(6, 6, 6)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(escolas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setorSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(txtEscolhaCurso)
                .addGap(5, 5, 5)
                .addComponent(cursosSeletorAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalvar)
                    .addComponent(btnCadastrarSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        nome.getAccessibleContext().setAccessibleName("");

        tabCadastroEscolas.setBackground(new java.awt.Color(255, 255, 255));

        escolhaEscola.setBackground(new java.awt.Color(0, 102, 102));
        escolhaEscola.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha uma Escola" }));
        escolhaEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaEscolaActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(102, 0, 0));
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setOpaque(false);

        tabelaVerProfessores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Matricula", "Endereço", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaVerProfessores);
        if (tabelaVerProfessores.getColumnModel().getColumnCount() > 0) {
            tabelaVerProfessores.getColumnModel().getColumn(0).setPreferredWidth(150);
        }

        progressoTabela.setBackground(new java.awt.Color(0, 153, 51));
        progressoTabela.setForeground(new java.awt.Color(102, 102, 102));
        progressoTabela.setOpaque(true);
        progressoTabela.setStringPainted(true);

        txtListarProfessores.setFont(new java.awt.Font("Segoe UI Semibold", 2, 12)); // NOI18N
        txtListarProfessores.setText("Lista de Professores relacionados a escolas");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        imgEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/EscolaImagem.png"))); // NOI18N

        nomeEscola.setText("Nome Da Escola");
        nomeEscola.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nomeEscolaFocusGained(evt);
            }
        });

        btnSalvarEscola.setBackground(new java.awt.Color(255, 255, 255));
        btnSalvarEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarEscola.setText("Salvar");
        btnSalvarEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarEscolaActionPerformed(evt);
            }
        });

        txtCadastrarEscola.setFont(new java.awt.Font("Rockwell Condensed", 0, 36)); // NOI18N
        txtCadastrarEscola.setForeground(new java.awt.Color(255, 255, 255));
        txtCadastrarEscola.setText("Cadastrar Escolas");

        backgroundCabeçalho3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        backgroundCabeçalho3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cabeçalhoGif.gif"))); // NOI18N
        backgroundCabeçalho3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        backgroundCabeçalho3.setIconTextGap(400);
        backgroundCabeçalho3.setMaximumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho3.setMinimumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho3.setPreferredSize(new java.awt.Dimension(0, 0));

        jLayeredPane6.setLayer(backgroundCabeçalho3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane6Layout = new javax.swing.GroupLayout(jLayeredPane6);
        jLayeredPane6.setLayout(jLayeredPane6Layout);
        jLayeredPane6Layout.setHorizontalGroup(
            jLayeredPane6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundCabeçalho3, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        jLayeredPane6Layout.setVerticalGroup(
            jLayeredPane6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundCabeçalho3, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(nomeEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvarEscola))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(imgEscola)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCadastrarEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(124, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane6, javax.swing.GroupLayout.Alignment.TRAILING))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(imgEscola)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCadastrarEscola)
                        .addGap(27, 27, 27)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeEscola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvarEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane6))
        );

        javax.swing.GroupLayout tabCadastroEscolasLayout = new javax.swing.GroupLayout(tabCadastroEscolas);
        tabCadastroEscolas.setLayout(tabCadastroEscolasLayout);
        tabCadastroEscolasLayout.setHorizontalGroup(
            tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(progressoTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(escolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtListarProfessores))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        tabCadastroEscolasLayout.setVerticalGroup(
            tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(txtListarProfessores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(escolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(progressoTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabCurso.setBackground(java.awt.SystemColor.window);

        nomeCurso.setText("Nome do Curso");

        escolasCurso.setBackground(new java.awt.Color(0, 153, 153));
        escolasCurso.setFont(escolas.getFont());

        btnSalvarCurso.setBackground(new java.awt.Color(255, 255, 255));
        btnSalvarCurso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarCurso.setText("Salvar");
        btnSalvarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarCursoActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        txtTurmas2.setBackground(new java.awt.Color(255, 255, 255));
        txtTurmas2.setFont(new java.awt.Font("SimSun-ExtB", 1, 24)); // NOI18N
        txtTurmas2.setForeground(new java.awt.Color(255, 255, 255));
        txtTurmas2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTurmas2.setText("Cadastro de Cursos");
        txtTurmas2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        imgTurmas2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgTurmas2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/CursoImagem.png"))); // NOI18N
        imgTurmas2.setMinimumSize(new java.awt.Dimension(341, 300));

        backgroundCabeçalho2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundCabeçalho2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cabeçalho3Gif.gif"))); // NOI18N
        backgroundCabeçalho2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        backgroundCabeçalho2.setIconTextGap(400);
        backgroundCabeçalho2.setMaximumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho2.setMinimumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho2.setPreferredSize(new java.awt.Dimension(0, 0));

        jLayeredPane5.setLayer(txtTurmas2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(imgTurmas2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(backgroundCabeçalho2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane5Layout = new javax.swing.GroupLayout(jLayeredPane5);
        jLayeredPane5.setLayout(jLayeredPane5Layout);
        jLayeredPane5Layout.setHorizontalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(txtTurmas2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imgTurmas2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
            .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backgroundCabeçalho2, javax.swing.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE))
        );
        jLayeredPane5Layout.setVerticalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(imgTurmas2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(txtTurmas2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backgroundCabeçalho2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane5)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane5)
        );

        txtSelecionarEscolaCurso.setText("Escolha uma escola correspondente:");

        javax.swing.GroupLayout tabCursoLayout = new javax.swing.GroupLayout(tabCurso);
        tabCurso.setLayout(tabCursoLayout);
        tabCursoLayout.setHorizontalGroup(
            tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCursoLayout.createSequentialGroup()
                .addGroup(tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCursoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeCurso)
                            .addComponent(escolasCurso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(tabCursoLayout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(btnSalvarCurso)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(tabCursoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSelecionarEscolaCurso)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabCursoLayout.setVerticalGroup(
            tabCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCursoLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(nomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(txtSelecionarEscolaCurso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(escolasCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnSalvarCurso)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tabDisciplinas.setBackground(java.awt.SystemColor.controlLtHighlight);

        nomeDisciplina.setText("Nome da disciplina");

        cursosSeletor.setBackground(new java.awt.Color(153, 153, 0));
        cursosSeletor.setFont(escolas.getFont());

        btnSalvarDisciplinas.setBackground(new java.awt.Color(255, 255, 255));
        btnSalvarDisciplinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarDisciplinas.setText("Salvar");
        btnSalvarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarDisciplinasActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        txtTurmas1.setBackground(new java.awt.Color(255, 255, 255));
        txtTurmas1.setFont(new java.awt.Font("SimSun-ExtB", 1, 24)); // NOI18N
        txtTurmas1.setForeground(new java.awt.Color(255, 255, 255));
        txtTurmas1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTurmas1.setText("Cadastro de Disciplinas");
        txtTurmas1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        imgTurmas1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgTurmas1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinasImagem.png"))); // NOI18N
        imgTurmas1.setMinimumSize(new java.awt.Dimension(341, 300));

        backgroundCabeçalho1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundCabeçalho1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cabeçalho2Gif.gif"))); // NOI18N
        backgroundCabeçalho1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        backgroundCabeçalho1.setIconTextGap(400);
        backgroundCabeçalho1.setMaximumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho1.setMinimumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho1.setPreferredSize(new java.awt.Dimension(0, 0));

        jLayeredPane4.setLayer(txtTurmas1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(imgTurmas1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(backgroundCabeçalho1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane4Layout = new javax.swing.GroupLayout(jLayeredPane4);
        jLayeredPane4.setLayout(jLayeredPane4Layout);
        jLayeredPane4Layout.setHorizontalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgTurmas1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTurmas1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
            .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backgroundCabeçalho1, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE))
        );
        jLayeredPane4Layout.setVerticalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addComponent(imgTurmas1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTurmas1)
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane4Layout.createSequentialGroup()
                    .addComponent(backgroundCabeçalho1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        txtEscolhaCursoDisciplina.setText("Escolha um curso correspondente:");

        javax.swing.GroupLayout tabDisciplinasLayout = new javax.swing.GroupLayout(tabDisciplinas);
        tabDisciplinas.setLayout(tabDisciplinasLayout);
        tabDisciplinasLayout.setHorizontalGroup(
            tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomeDisciplina)
                    .addComponent(cursosSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tabDisciplinasLayout.createSequentialGroup()
                        .addGroup(tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                                .addGap(296, 296, 296)
                                .addComponent(btnSalvarDisciplinas))
                            .addComponent(txtEscolhaCursoDisciplina))
                        .addGap(0, 378, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabDisciplinasLayout.setVerticalGroup(
            tabDisciplinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDisciplinasLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(nomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(txtEscolhaCursoDisciplina)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cursosSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnSalvarDisciplinas)
                .addGap(43, 43, 43))
        );

        tabTurmas.setBackground(java.awt.SystemColor.controlLtHighlight);
        tabTurmas.setOpaque(false);

        nomeTurma.setText("Nome da Turma");

        DisciplinaSeletor.setBackground(new java.awt.Color(0, 153, 153));
        DisciplinaSeletor.setFont(escolas.getFont());
        DisciplinaSeletor.setForeground(new java.awt.Color(204, 204, 0));

        btnSalvarTurmas.setBackground(new java.awt.Color(255, 255, 255));
        btnSalvarTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarTurmas.setText("Salvar");
        btnSalvarTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarTurmasActionPerformed(evt);
            }
        });

        ProfessorSeletor.setBackground(new java.awt.Color(0, 153, 153));
        ProfessorSeletor.setFont(escolas.getFont());
        ProfessorSeletor.setForeground(new java.awt.Color(204, 0, 204));

        txtEscolhaDisciplina.setText("Escolha uma disciplina:");

        txtEscolhaProfessor.setText("Escolha um professor:");

        txtAlunosParticipantesTurmas.setText("Selecione os alunos que fazem parte dessa turma:");

        btnSelecionarAlunos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/selecionarImagem.png"))); // NOI18N
        btnSelecionarAlunos.setText("Selecionar");
        btnSelecionarAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarAlunosActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setPreferredSize(new java.awt.Dimension(888, 218));

        txtTurmas.setBackground(new java.awt.Color(255, 255, 255));
        txtTurmas.setFont(new java.awt.Font("SimSun-ExtB", 1, 24)); // NOI18N
        txtTurmas.setForeground(new java.awt.Color(255, 255, 255));
        txtTurmas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTurmas.setText("Cadastro de Turmas");
        txtTurmas.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        imgTurmas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasImagem.png"))); // NOI18N
        imgTurmas.setMinimumSize(new java.awt.Dimension(341, 300));

        backgroundCabeçalho.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundCabeçalho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cabeçalhoGif.gif"))); // NOI18N
        backgroundCabeçalho.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        backgroundCabeçalho.setIconTextGap(400);
        backgroundCabeçalho.setMaximumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho.setMinimumSize(new java.awt.Dimension(0, 0));
        backgroundCabeçalho.setPreferredSize(new java.awt.Dimension(0, 0));

        jLayeredPane2.setLayer(txtTurmas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(imgTurmas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(backgroundCabeçalho, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgTurmas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTurmas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE))
                .addGap(36, 36, 36))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backgroundCabeçalho, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addComponent(imgTurmas, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTurmas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addComponent(backgroundCabeçalho, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
        );

        javax.swing.GroupLayout tabTurmasLayout = new javax.swing.GroupLayout(tabTurmas);
        tabTurmas.setLayout(tabTurmasLayout);
        tabTurmasLayout.setHorizontalGroup(
            tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabTurmasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabTurmasLayout.createSequentialGroup()
                        .addGroup(tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addGap(297, 297, 297)
                                .addComponent(btnSalvarTurmas))
                            .addComponent(txtEscolhaDisciplina)
                            .addComponent(txtEscolhaProfessor)
                            .addGroup(tabTurmasLayout.createSequentialGroup()
                                .addComponent(txtAlunosParticipantesTurmas)
                                .addGap(18, 18, 18)
                                .addComponent(btnSelecionarAlunos)))
                        .addGap(0, 312, Short.MAX_VALUE))
                    .addComponent(nomeTurma)
                    .addComponent(DisciplinaSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProfessorSeletor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 720, Short.MAX_VALUE)
        );
        tabTurmasLayout.setVerticalGroup(
            tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabTurmasLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(nomeTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(txtEscolhaDisciplina)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisciplinaSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEscolhaProfessor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProfessorSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabTurmasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAlunosParticipantesTurmas)
                    .addComponent(btnSelecionarAlunos))
                .addGap(23, 23, 23)
                .addComponent(btnSalvarTurmas)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        backGround.setBackground(new java.awt.Color(255, 255, 255));
        backGround.setMaximumSize(new java.awt.Dimension(748, 505));
        backGround.setMinimumSize(new java.awt.Dimension(748, 505));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/iconeApp.png"))); // NOI18N
        jLabel2.setDisabledIcon(null);

        Background.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/gifBackground.gif"))); // NOI18N
        Background.setFocusable(false);
        Background.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Background.setIconTextGap(0);
        Background.setInheritsPopupMenu(false);
        Background.setMaximumSize(new java.awt.Dimension(748, 505));
        Background.setMinimumSize(new java.awt.Dimension(748, 505));
        Background.setPreferredSize(new java.awt.Dimension(748, 505));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/githubIcone.png"))); // NOI18N
        jButton1.setText("Github");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backGroundLayout = new javax.swing.GroupLayout(backGround);
        backGround.setLayout(backGroundLayout);
        backGroundLayout.setHorizontalGroup(
            backGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backGroundLayout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(39, 39, 39))
            .addGroup(backGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        backGroundLayout.setVerticalGroup(
            backGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backGroundLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(68, 68, 68))
            .addGroup(backGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backGroundLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout painelADireitaLayout = new javax.swing.GroupLayout(painelADireita);
        painelADireita.setLayout(painelADireitaLayout);
        painelADireitaLayout.setHorizontalGroup(
            painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelADireitaLayout.createSequentialGroup()
                .addComponent(tabCadastroProfFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 19, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabDisciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabTurmas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 65, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabCadastroEscolas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 18, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(backGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        painelADireitaLayout.setVerticalGroup(
            painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelADireitaLayout.createSequentialGroup()
                .addComponent(tabCadastroProfFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 131, Short.MAX_VALUE))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 147, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabDisciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 167, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabTurmas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 79, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(tabCadastroEscolas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 95, Short.MAX_VALUE)))
            .addGroup(painelADireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(painelADireitaLayout.createSequentialGroup()
                    .addComponent(backGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabCadastroEscolas.getAccessibleContext().setAccessibleName("");
        tabCadastroEscolas.getAccessibleContext().setAccessibleParent(jLayeredPane1);

        jLayeredPane1.setLayer(painelAEsquerda, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(painelADireita, javax.swing.JLayeredPane.PALETTE_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addComponent(painelAEsquerda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(painelADireita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelAEsquerda, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
            .addComponent(painelADireita, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );

        menuBarPrincipal.setBackground(painelAEsquerda.getBackground());
        menuBarPrincipal.setForeground(new java.awt.Color(255, 102, 102));
        menuBarPrincipal.setOpaque(false);
        menuBarPrincipal.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                menuBarPrincipalMouseDragged(evt);
            }
        });
        menuBarPrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuBarPrincipalMousePressed(evt);
            }
        });

        MenuGerarRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/opcoesImagem.png"))); // NOI18N
        MenuGerarRelatorio.setText("Opções");

        menuGerarRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/gerarPDFImagem.png"))); // NOI18N
        menuGerarRelatorio.setText("Gerar Relatorios");
        menuGerarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGerarRelatorioActionPerformed(evt);
            }
        });

        relatorioProfessores.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioProfessores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N
        relatorioProfessores.setText("Professores");
        relatorioProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioProfessoresActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioProfessores);

        relatorioFuncionarios.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioFuncionarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/funcionarioImagem.png"))); // NOI18N
        relatorioFuncionarios.setText("Funcionarios");
        relatorioFuncionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioFuncionariosActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioFuncionarios);

        relatorioAlunos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioAlunos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        relatorioAlunos.setText("Alunos");
        relatorioAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioAlunosActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioAlunos);

        relatorioescolas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioescolas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/escolasImagem.png"))); // NOI18N
        relatorioescolas.setText("Escolas");
        relatorioescolas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioescolasActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioescolas);

        relatorioCursos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioCursos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cursosImagem.png"))); // NOI18N
        relatorioCursos.setText("Cursos");
        relatorioCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioCursosActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioCursos);

        relatorioDisciplinas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioDisciplinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinasImagemIcone.png"))); // NOI18N
        relatorioDisciplinas.setText("Disciplinas");
        relatorioDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioDisciplinasActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioDisciplinas);

        relatorioTurmas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        relatorioTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasImagensIcone.png"))); // NOI18N
        relatorioTurmas.setText("Turmas");
        relatorioTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatorioTurmasActionPerformed(evt);
            }
        });
        menuGerarRelatorio.add(relatorioTurmas);

        MenuGerarRelatorio.add(menuGerarRelatorio);

        menuDeletarRegistros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/deletarImagem.png"))); // NOI18N
        menuDeletarRegistros.setText("Deletar Registros");

        MenuItemDelTudo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MenuItemDelTudo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/deletarTudoImagem.png"))); // NOI18N
        MenuItemDelTudo.setText("Todos");
        MenuItemDelTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDelTudoActionPerformed(evt);
            }
        });
        menuDeletarRegistros.add(MenuItemDelTudo);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/deletarPorCategoriaImagem.png"))); // NOI18N
        jMenu3.setText("Por Categorias");

        MenuItemProfessor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N
        MenuItemProfessor.setText("Professores");
        MenuItemProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemProfessorActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemProfessor);

        MenuItemFunc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/funcionarioImagem.png"))); // NOI18N
        MenuItemFunc.setText("Funcionarios");
        MenuItemFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemFuncActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemFunc);

        MenuItemAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        MenuItemAluno.setText("Alunos");
        MenuItemAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAlunoActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemAluno);

        MenuItemEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/escolasImagem.png"))); // NOI18N
        MenuItemEscola.setText("Escolas");
        MenuItemEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemEscolaActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemEscola);

        MenuItemCurso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cursosImagem.png"))); // NOI18N
        MenuItemCurso.setText("Cursos");
        MenuItemCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCursoActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemCurso);

        MenuItemDisc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinasImagemIcone.png"))); // NOI18N
        MenuItemDisc.setText("Disciplinas");
        MenuItemDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemDiscActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemDisc);

        MenuItemTurma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasImagensIcone.png"))); // NOI18N
        MenuItemTurma.setText("Turmas");
        MenuItemTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemTurmaActionPerformed(evt);
            }
        });
        jMenu3.add(MenuItemTurma);

        menuDeletarRegistros.add(jMenu3);

        MenuGerarRelatorio.add(menuDeletarRegistros);

        MenuItemSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        MenuItemSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/sairImagem.png"))); // NOI18N
        MenuItemSair.setText("Sair");
        MenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSairActionPerformed(evt);
            }
        });
        MenuGerarRelatorio.add(MenuItemSair);

        menuBarPrincipal.add(MenuGerarRelatorio);

        menuVerEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/editarImagem.png"))); // NOI18N
        menuVerEditar.setText("Ver/Editar");
        menuVerEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerEditarActionPerformed(evt);
            }
        });

        editarProfessor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        editarProfessor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/professorImagem.png"))); // NOI18N
        editarProfessor.setText("Professor");
        editarProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarProfessorActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarProfessor);

        editarAluno.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        editarAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alunoImagen.png"))); // NOI18N
        editarAluno.setText("Aluno");
        editarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarAlunoActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarAluno);

        editarFuncionario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        editarFuncionario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/funcionarioImagem.png"))); // NOI18N
        editarFuncionario.setText("Funcionario");
        editarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarFuncionarioActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarFuncionario);

        editarEscolas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        editarEscolas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/escolasImagem.png"))); // NOI18N
        editarEscolas.setText("Escolas");
        editarEscolas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarEscolasActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarEscolas);

        editarCursos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        editarCursos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cursosImagem.png"))); // NOI18N
        editarCursos.setText("Cursos");
        editarCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarCursosActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarCursos);

        editarDisciplinas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        editarDisciplinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/disciplinasImagemIcone.png"))); // NOI18N
        editarDisciplinas.setText("Disciplinas");
        editarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarDisciplinasActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarDisciplinas);

        editarTurmas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        editarTurmas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/turmasImagensIcone.png"))); // NOI18N
        editarTurmas.setText("Turmas");
        editarTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarTurmasActionPerformed(evt);
            }
        });
        menuVerEditar.add(editarTurmas);

        menuBarPrincipal.add(menuVerEditar);

        setJMenuBar(menuBarPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void escolhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            //Verifica se foi selecionado o item professor
            if (escolha.getSelectedItem().equals("Professores")) {
                //Habilita o escolas e desabilita o setor
                IconePessoa.setIcon(MenuItemProfessor.getIcon());
                escolas.setEnabled(true);
                dataDeAdimissao.setEnabled(true);
                txtEscolhaEscola.setEnabled(true);
                setorSeletor.setEnabled(false);
                btnCadastrarSetor.setEnabled(false);
                cursosSeletorAluno.setEnabled(false);
                txtEscolhaCurso.setEnabled(false);
                txtEscolhaSetor.setEnabled(false);
                salario.setEnabled(true);
            } else if (escolha.getSelectedItem().equals("Funcionarios")) {
                //inverte caso seja selecionado outra opção
                IconePessoa.setIcon(MenuItemFunc.getIcon());
                escolas.setEnabled(false);
                dataDeAdimissao.setEnabled(true);
                txtEscolhaEscola.setEnabled(false);
                txtEscolhaCurso.setEnabled(false);
                setorSeletor.setEnabled(true);
                btnCadastrarSetor.setEnabled(true);
                cursosSeletorAluno.setEnabled(false);
                salario.setEnabled(true);
            } else if (escolha.getSelectedItem().equals("Alunos")) {
                IconePessoa.setIcon(MenuItemAluno.getIcon());
                escolas.setEnabled(false);
                txtEscolhaCurso.setEnabled(true);
                txtEscolhaSetor.setEnabled(false);
                txtEscolhaEscola.setEnabled(false);
                setorSeletor.setEnabled(false);
                btnCadastrarSetor.setEnabled(false);
                dataDeAdimissao.setEnabled(false);
                cursosSeletorAluno.setEnabled(true);
                salario.setEnabled(false);
            }
        });
    }//GEN-LAST:event_escolhaActionPerformed


    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            //Exibe Painel de confirmação
            if (JOptionPane.showConfirmDialog(null, "Tem Certeza que deseja Salvar?",
                    "Salvar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                //Convertendo as entradas do usuario(String) em numeros
                if (!this.escolha.getSelectedItem().equals("Alunos")) {
                    String dataEmUmFormato = dataDeAdimissao.getText();
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    Date data = null;
                    try {

                        data = formato.parse(dataEmUmFormato);

                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    formato.applyPattern("ddMMyyyy");
                    String dataFormatada = formato.format(data);
                    dataAdimicao = Integer.parseInt(dataFormatada);
                }
                matriculaFunc = Integer.parseInt(this.matricula.getText());
                if (!this.escolha.getSelectedItem().equals("Alunos")) {
                    salarioFunc = Float.parseFloat(this.salario.getText());
                }
                telefoneFunc = Integer.parseInt(this.telefone.getText());

                //Logica para quando o usuario seleciona o item professor    
                if (this.escolha.getSelectedItem().equals("Professores")) {
                    Escolas escola = null;
                    for (int i = 0; i < escolasDB.size(); i++) {
                        escola = (Escolas) escolasDB.get(i);
                        if (Main.escolas.getSelectedItem().toString().equals(escola.getNome())) {
                            break;
                        }
                    }

                    //Cria novo objeto com as entradas do usuario
                    professor = new Professor(escola, dataAdimicao, salarioFunc, this.endereco.getText(),
                            matriculaFunc, nome.getText(), telefoneFunc);

                    exibeCadastro = professor.getNome() + " | " + professor.getMatricula() + "\n";

                    //Adicionando o novo objeto no Arrey List
                    professorDB.add(professor);
                    ProfessorSeletor.addItem(professor.getNome());
                    salvarDados(professorDB, "registroProfessor.txt");

                } else if (this.escolha.getSelectedItem().equals("Funcionarios")) {
                    Setor setor = null;
                    for (int i = 0; i < setorDB.size(); i++) {
                        setor = (Setor) setorDB.get(i);
                        if (Main.setorSeletor.getSelectedItem().toString().equals(setor.getNome())) {
                            break;
                        }
                    }
                    //Logica para quando o usuario seleciona outro item   
                    administrativo = new Administrativo(setor, dataAdimicao,
                            salarioFunc, this.endereco.getText(), matriculaFunc, nome.getText(), telefoneFunc);

                    exibeCadastro = administrativo.getNome() + " | " + administrativo.getMatricula() + " | "
                            + Main.setorSeletor.getSelectedItem().toString() + "\n";

                    //Adicionando o novo objeto no Arrey List
                    funcionarioDB.add(administrativo);
                    salvarDados(funcionarioDB, "registroAdm.txt");

                } else if (this.escolha.getSelectedItem().equals("Alunos")) {
                    Curso curso = null;
                    for (int i = 0; i < cursosDB.size(); i++) {
                        curso = (Curso) cursosDB.get(i);
                        if (cursosSeletorAluno.getSelectedItem().toString().equals(curso.getNome())) {
                            break;
                        }
                    }
                    aluno = new Aluno(curso, this.endereco.getText(), matriculaFunc, nome.getText(), telefoneFunc);
                    exibeCadastro = aluno.getNome() + " | " + aluno.getMatricula() + " | " + aluno.getCurso().getNome() + "\n";

                    //Adicionando o novo objeto no Arrey List
                    alunoDB.add(aluno);
                    salvarDados(alunoDB, "registroAluno.txt");
                }
                JOptionPane.showMessageDialog(null, exibeCadastro + "Salvo", "Salvo!", JOptionPane.INFORMATION_MESSAGE);
                btnSalvar.setName("Salvo");
            }
        } catch (Exception e) {

            //Menssagem de Erro caso usuario insira uma entrada invalida
            JOptionPane.showMessageDialog(null, "                                 >>   ATENÇÂO!  <<\nVerifique "
                    + "se você preencheu algum campo incorretamente!\n\n"
                    + "> NÃO é permitido inserir LETRAS no lugar de numeros vice-versa.\n"
                    + "> É NECESSARIO preencher TODOS os campos!\n\n *Os campos incorretos estaram "
                    + "em vermelho!", "Erro! Não foi possível salvar!!", JOptionPane.ERROR_MESSAGE);
            btnSalvar.setName("ERRO");
            VerificaErro erro = new VerificaErro();

            if (!this.escolha.getSelectedItem().equals("Alunos")) {
                erro.encontrar(matricula);
                erro.encontrar(salario);
                erro.encontrar(telefone);
                erro.encontrar(escolas);
                erro.encontrar(setorSeletor);
            } else {
                erro.encontrar(matricula);
                erro.encontrar(telefone);
                erro.encontrar(cursosSeletorAluno);
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void salvarDados(ArrayList lista, String nomeDoArquivo) {
        Gson gson = new Gson();
        String json = gson.toJson(lista);
        WriteFile(json, nomeDoArquivo);
    }

    private void matriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matriculaActionPerformed

    private void setorSeletorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setorSeletorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setorSeletorActionPerformed

    private void btnSalvarEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarEscolaActionPerformed
        SwingUtilities.invokeLater(() -> {
            if (!nomeEscola.getText().equals("")) {
                Escolas novaEscola = new Escolas(nomeEscola.getText());
                if (!escolasDB.isEmpty()) {
                    if (escolaExiste()) {

                    } else {
                        escolasDB.add(novaEscola);
                        escolhaEscola.addItem(novaEscola.getNome());
                        escolas.addItem(novaEscola.getNome());
                        escolasCurso.addItem(novaEscola.getNome());
                        salvarDados(escolasDB, "registroEscolas.txt");
                        JOptionPane.showMessageDialog(null, "Salvo com sucesso! ", "Sucesso !",JOptionPane.INFORMATION_MESSAGE);
                    }

                } else {
                    escolasDB.add(novaEscola);
                    escolhaEscola.addItem(novaEscola.getNome());
                    escolas.addItem(novaEscola.getNome());
                    escolasCurso.addItem(novaEscola.getNome());
                    salvarDados(escolasDB, "registroEscolas.txt");
                    JOptionPane.showMessageDialog(null, "Salvo com sucesso! ", "Sucesso !",JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                VerificaErro erro = new VerificaErro();
                erro.encontrarCampoVazio(nomeEscola);
            }   
             
        });
    }//GEN-LAST:event_btnSalvarEscolaActionPerformed
    private boolean escolaExiste() {
        boolean existe = false;
        for (int i = 0; i < escolasDB.size(); i++) {
            Escolas novo = (Escolas) escolasDB.get(i);
            if (nomeEscola.getText().equals(novo.getNome())) {
                JOptionPane.showMessageDialog(null, "Ja existe essa escola na base de dados!\nPor favor tente novamente.",
                        "ERRO!", JOptionPane.ERROR_MESSAGE);
                existe = true;
                break;
            }
        }
        return existe;
    }

    private void escolhaEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaEscolaActionPerformed
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            for (int i = 0; i < professorDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                professor = (Professor) professorDB.get(i);
                //Verifica se o item selecionado é igual ao cadastrado
                if (professor.getEscola().getNome().equals(escolhaEscola.getSelectedItem().toString())) {
                    final SwingWorker w = new SwingWorker() {
                        @Override
                        protected Object doInBackground() throws Exception {
                            for (int i = 1; i <= 100; i++) {
                                try {
                                    if (i < 100) {
                                        setCursor(new Cursor(Cursor.WAIT_CURSOR));
                                    }
                                    if (i == 100) {
                                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                    }
                                    if (i == 30) {
                                        progressoTabela.setToolTipText("Quase terminando");
                                    }

                                    progressoTabela.setValue(i);
                                    progressoTabela.setString(i + "%");
                                    Thread.sleep(tabelaVerProfessores.getRowCount());
                                } catch (InterruptedException ex) {
                                    ex.printStackTrace();
                                }
                            }
                            return 0;
                        }
                    };
                    if (linhas != tabelaVerProfessores.getRowCount() || tabelaVerProfessores.getRowCount() == 0) {
                        w.execute();
                    }
                    //Enquanto o cadastro for diferente do loop anterior..
                    if (i > 0 && matriculaAnterior != professor.getMatricula()) {
                        try {
                            //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        } catch (ArrayIndexOutOfBoundsException e) {
                            //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                            JTable t = new JTable(tabelaVerProfessores.getModel());
                            DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                            modelo.addRow(new Object[]{null, null});
                            //Preenche a linha vazia que foi criada
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        }
                        //Verifica se é a primeira passagem do loop
                    } else if (i == 0) {
                        try {
                            //Enquanto houver linhas suficientes na tabela..
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        } catch (ArrayIndexOutOfBoundsException e) {
                            //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                            JTable t = new JTable(tabelaVerProfessores.getModel());
                            DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                            modelo.addRow(new Object[]{null, null});
                            //Preenche a linha vazia que foi criada
                            tabelaVerProfessores.setValueAt(professor.getNome(), linhas, 0);
                            tabelaVerProfessores.setValueAt(professor.getMatricula(), linhas, 1);
                            tabelaVerProfessores.setValueAt(professor.getEndereco(), linhas, 2);
                            tabelaVerProfessores.setValueAt(professor.getTelefone(), linhas, 3);
                        }
                    } else if (matriculaAnterior == professor.getMatricula()) {
                        //decrementa em linhas se matricula for igual o da varredura anterior.
                        linhas--;
                    }

                    linhas++;
                    //Remove as linhas desnecessarias da tabela
                    while (tabelaVerProfessores.getRowCount() > linhas) {
                        JTable t = new JTable(tabelaVerProfessores.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.removeRow(tabelaVerProfessores.getRowCount() - linhas);
                    }
                    matriculaAnterior = professor.getMatricula();
                    //Remove todas as linhas da tabela
                } else if (escolhaEscola.getSelectedItem()
                        .equals("Escolha uma Escola")) {
                    progressoTabela.setValue(0);
                    progressoTabela.setString("0%");
                    JTable t = new JTable(tabelaVerProfessores.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(tabelaVerProfessores.getRowCount() - 1);
                    //modelo.removeRow(6);
                }
            }
        });

    }//GEN-LAST:event_escolhaEscolaActionPerformed

    private void nomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFocusGained
        if (nome.getText().equals("Nome completo")) {
            nome.setText("");
        }
    }//GEN-LAST:event_nomeFocusGained

    private void nomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFocusLost
        if (nome.getText().equals("")) {
            nome.setText("Nome completo");
        }
    }//GEN-LAST:event_nomeFocusLost

    private void enderecoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enderecoFocusGained
        if (endereco.getText().equals("Endereço")) {
            endereco.setText("");
        }
    }//GEN-LAST:event_enderecoFocusGained

    private void enderecoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enderecoFocusLost
        if (endereco.getText().equals("")) {
            endereco.setText("Endereço");
        }
    }//GEN-LAST:event_enderecoFocusLost

    private void matriculaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matriculaFocusGained
        if (matricula.getText().equals("Matricula")) {
            matricula.setText("");
        }
        if (matricula.getBackground().equals(Color.red)) {
            matricula.setBackground(Color.white);
            matricula.setForeground(Color.black);
        }
    }//GEN-LAST:event_matriculaFocusGained

    private void matriculaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matriculaFocusLost
        if (matricula.getText().equals("")) {
            matricula.setText("Matricula");
        }
    }//GEN-LAST:event_matriculaFocusLost

    private void dataDeAdimissaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDeAdimissaoFocusGained
        if (dataDeAdimissao.getText().equals("Data de Admissão")) {
            dataDeAdimissao.setText("");
        }
        if (dataDeAdimissao.getBackground().equals(Color.red)) {
            dataDeAdimissao.setBackground(Color.white);
            dataDeAdimissao.setForeground(Color.black);
        }
    }//GEN-LAST:event_dataDeAdimissaoFocusGained

    private void dataDeAdimissaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDeAdimissaoFocusLost
        if (dataDeAdimissao.getText().equals("")) {
            dataDeAdimissao.setText("Data de Admissão");
        }

        String dataEmUmFormato = dataDeAdimissao.getText();
        SimpleDateFormat formato = new SimpleDateFormat("ddMMyyyy");
        Date data = null;
        try {
            data = formato.parse(dataEmUmFormato);
            formato.applyPattern("dd/MM/yyyy");
            String dataFormatada = formato.format(data);
            dataDeAdimissao.setText(dataFormatada);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Por favor insira apenas numeros.\nFORMATO DA DATA: DD/MM/AAAA",
                    "ERRO!", JOptionPane.WARNING_MESSAGE);
            dataDeAdimissao.setBackground(Color.red);
            Logger.getLogger(Main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_dataDeAdimissaoFocusLost

    private void telefoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefoneFocusLost
        if (telefone.getText().equals("")) {
            telefone.setText("Telefone");
        }
    }//GEN-LAST:event_telefoneFocusLost

    private void telefoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefoneFocusGained
        if (telefone.getText().equals("Telefone")) {
            telefone.setText("");
        }
        if (telefone.getBackground().equals(Color.red)) {
            telefone.setBackground(Color.white);
            telefone.setForeground(Color.black);
        }
    }//GEN-LAST:event_telefoneFocusGained

    private void btnCadastrarSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarSetorActionPerformed
        try {
            Setor setor = new Setor(JOptionPane.showInputDialog("Insira o nome do setor:"));
            if (!setor.getNome().equals("")) {
                setorSeletor.addItem(setor.getNome());
                setorDB.add(setor);
                salvarDados(setorDB, "registroSetor.txt");
                
            } else {
                JOptionPane.showMessageDialog(null, "Invalido! Escreva o nome do setor", "ERRO!",
                        JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalido, por favor tente novamente", "ERRO!",
                    JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnCadastrarSetorActionPerformed

    private void btnSalvarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarCursoActionPerformed
        Escolas escola = null;
        for (int i = 0; i < escolasDB.size(); i++) {
            escola = (Escolas) escolasDB.get(i);
            if (escolasCurso.getSelectedItem().toString().equals(escola.getNome())) {
                break;
            }
        }
        if(!nomeCurso.getText().equals("") && escola !=null){
        Curso curso = new Curso(nomeCurso.getText(), escola);
        for (int i = 0; i < cursosDB.size(); i++) {
            Curso novo = (Curso) cursosDB.get(i);
            if (nomeCurso.getText().equals(novo.getNome())) {
                JOptionPane.showMessageDialog(null, nomeCurso.getText() + " ja existe na base de dados!",
                        "Curso ja existe!", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (nomeCurso.getText().equals("")) {
                return;
            }
        }
        cursosDB.add(curso);
        cursosSeletor.addItem(curso.getNome());
        cursosSeletorAluno.addItem(curso.getNome());
        salvarDados(cursosDB, "registroCurso.txt");
        JOptionPane.showMessageDialog(null, "Salvo com sucesso! ", "Sucesso !",JOptionPane.INFORMATION_MESSAGE);
        }else{
            VerificaErro erro = new VerificaErro();
            erro.encontrar(escolasCurso);
            erro.encontrarCampoVazio(nomeCurso);
        }
    }//GEN-LAST:event_btnSalvarCursoActionPerformed

    private void btnSalvarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarDisciplinasActionPerformed
        Curso curso = null;
        for (int i = 0; i < cursosDB.size(); i++) {
            curso = (Curso) cursosDB.get(i);
            if (cursosSeletor.getSelectedItem().toString().equals(curso.getNome())) {
                break;
            }
        }
        if (disciplinaDB.isEmpty()) {
            if(!nomeDisciplina.getText().equals("") && curso != null){
            Disciplinas disciplina = new Disciplinas( nomeDisciplina.getText(), curso);
            disciplinaDB.add(disciplina);
            DisciplinaSeletor.addItem(disciplina.getNome());
            salvarDados(disciplinaDB, "registroDisciplina.txt");
            JOptionPane.showMessageDialog(null, "Salvo com sucesso! ", "Sucesso !",JOptionPane.INFORMATION_MESSAGE);
            }else{
                VerificaErro erro = new VerificaErro();
                erro.encontrar(cursosSeletor);
                erro.encontrarCampoVazio(nomeDisciplina);
            }
            
        } else {
            for (int i = 0; i < disciplinaDB.size(); i++) {
                Disciplinas novo = (Disciplinas) disciplinaDB.get(i);
                if (nomeDisciplina.getText().equals(novo.getNome())) {
                    JOptionPane.showMessageDialog(null, nomeDisciplina.getText() + " ja existe na base de dados!",
                            "Disciplina ja existe!", JOptionPane.WARNING_MESSAGE);
                    return;
                } else if (nomeDisciplina.getText().equals("")) {
                    return;
                }
            }
            Disciplinas disciplina = new Disciplinas( nomeDisciplina.getText(), curso);
            disciplinaDB.add(disciplina);
            DisciplinaSeletor.addItem(disciplina.getNome());
            salvarDados(disciplinaDB, "registroDisciplina.txt");
            JOptionPane.showMessageDialog(null, "Salvo com sucesso! ", "Sucesso !",JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnSalvarDisciplinasActionPerformed

    private void btnSalvarTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarTurmasActionPerformed
        Disciplinas disciplinas = null;
        Professor prof = null;
        for (int i = 0; i < disciplinaDB.size(); i++) {
            disciplinas = (Disciplinas) disciplinaDB.get(i);
            if (DisciplinaSeletor.getSelectedItem().equals(disciplinas.getNome())) {
                break;
            }
        }
        for (int i = 0; i < professorDB.size(); i++) {
            prof = (Professor) professorDB.get(i);
            if (ProfessorSeletor.getSelectedItem().equals(prof.getNome())) {
                break;
            }
        }
        if (turmasDB.isEmpty()) {
            if (!alunosSelecionados.isEmpty() && !nomeTurma.getText().equals("") && disciplinas != null && prof != null) {
            Turmas turmas = new Turmas( nomeTurma.getText(), disciplinas, prof);
            turmas.setAluno(alunosSelecionados);
            turmasDB.add(turmas);
            salvarDados(turmasDB, "registroTurma.txt");
            alunosSelecionados.removeAll(alunosSelecionados);
            JOptionPane.showMessageDialog(null, "Precisamos reiniciar a aplicação! \nClique em OK e o APP ira Reinicializar.");
            reiniciarApp();
            }else{
                JOptionPane.showMessageDialog(null, "Existem erros no formulario! \n iremos destacar"
                        + " em VERMELHO o que precisa ser alterado.");
                VerificaErro erro = new VerificaErro();
                erro.encontrarCampoVazio(nomeTurma);
                erro.encontrar(ProfessorSeletor);
                erro.encontrar(DisciplinaSeletor);
                if (alunosSelecionados.isEmpty()) {
                    btnSelecionarAlunos.setBackground(Color.red);
                    btnSelecionarAlunos.setForeground(Color.white);
                }
            }
        } else {
            if (!alunosSelecionados.isEmpty() && !nomeTurma.getText().equals("") && disciplinas != null && prof != null) {
            for (int i = 0; i < turmasDB.size(); i++) {
                Turmas novo = (Turmas) turmasDB.get(i);
                if (nomeTurma.getText().equals(novo.getNome())) {
                    JOptionPane.showMessageDialog(null, nomeTurma.getText() + " ja existe na base de dados!",
                            "Turma ja existe!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            
            
                Turmas turmas = new Turmas(nomeTurma.getText(), disciplinas, prof);
                turmas.setAluno(alunosSelecionados);
                turmasDB.add(turmas);
                salvarDados(turmasDB, "registroTurma.txt");
                alunosSelecionados.removeAll(alunosSelecionados);
                JOptionPane.showMessageDialog(null, "Precisamos reiniciar a aplicação! \nClique em OK e o"
                        + " APP ira Reinicializar.");
                reiniciarApp();
            } else {
                JOptionPane.showMessageDialog(null, "Existem erros no formulario! \n iremos destacar"
                        + " em VERMELHO o que precisa ser alterado.");
                VerificaErro erro = new VerificaErro();
                erro.encontrarCampoVazio(nomeTurma);
                erro.encontrar(ProfessorSeletor);
                erro.encontrar(DisciplinaSeletor);
                if (alunosSelecionados.isEmpty()) {
                    btnSelecionarAlunos.setBackground(Color.red);
                    btnSelecionarAlunos.setForeground(Color.white);
                }
            }
        }
        
    }//GEN-LAST:event_btnSalvarTurmasActionPerformed

    private void menuGerarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGerarRelatorioActionPerformed

    }//GEN-LAST:event_menuGerarRelatorioActionPerformed

    private void relatorioProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioProfessoresActionPerformed
        relatorio.gerarPDF(professorDB, "Professor");
    }//GEN-LAST:event_relatorioProfessoresActionPerformed

    private void relatorioFuncionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioFuncionariosActionPerformed
        relatorio.gerarPDF(funcionarioDB, "Funcionario");
    }//GEN-LAST:event_relatorioFuncionariosActionPerformed

    private void relatorioAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioAlunosActionPerformed
        relatorio.gerarPDF(alunoDB, "Aluno");
    }//GEN-LAST:event_relatorioAlunosActionPerformed

    private void MenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_MenuItemSairActionPerformed

    private void MenuItemDelTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDelTudoActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR TODOS os registros?", "Deletar tudo!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION){
            if (deletar.todosRegistros(new File("arquivos"))){
            JOptionPane.showMessageDialog(null, "Deletado com sucesso");
            }
        }
    }//GEN-LAST:event_MenuItemDelTudoActionPerformed

    private void MenuItemProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemProfessorActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(professorDB,
                    JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você "
                            + "deseja Excluir\n Digite: Tudo para excluir todos os professores", "Quem você "
                            + "deseja excluir?", JOptionPane.QUESTION_MESSAGE),
                    "registroProfessor.txt");
            if (deletar.isDeletado()) {
                professorDB = deletar.listaAtualizada;
                salvarDados(professorDB, "registroProfessor.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }
        }
    }//GEN-LAST:event_MenuItemProfessorActionPerformed

    private void MenuItemFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemFuncActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(funcionarioDB,
                    JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você "
                            + "deseja Excluir\n Digite: Tudo para excluir todos os Funcionarios", "Quem você "
                            + "deseja excluir?", JOptionPane.QUESTION_MESSAGE),
                    "registroAdm.txt");
            if (deletar.isDeletado()) {
                funcionarioDB = deletar.listaAtualizada;
                salvarDados(funcionarioDB, "registroAdm.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }
        }
    }//GEN-LAST:event_MenuItemFuncActionPerformed

    private void MenuItemAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAlunoActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(alunoDB,
                    JOptionPane.showInputDialog(null, "Informe o numero de matricula do cadastro que você "
                            + "deseja Excluir\n Digite: Tudo para excluir todos os Alunos", "Quem você deseja"
                            + " excluir?", JOptionPane.QUESTION_MESSAGE),
                    "registroAluno.txt");
            if (deletar.isDeletado()) {
                alunoDB = deletar.listaAtualizada;
                salvarDados(alunoDB, "registroAluno.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }
        }
    }//GEN-LAST:event_MenuItemAlunoActionPerformed

    private void MenuItemEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemEscolaActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(escolasDB,
                    JOptionPane.showInputDialog(null, "Informe o nome da ESCOLA que você deseja Excluir\n Digite:"
                            + " Tudo para excluir todos os Escolas", "Quem você deseja excluir?",
                            JOptionPane.QUESTION_MESSAGE),
                    "registroEscolas.txt");
            if (deletar.isDeletado()) {
                escolasDB = deletar.listaAtualizada;
                salvarDados(escolasDB, "registroEscolas.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }
        }
    }//GEN-LAST:event_MenuItemEscolaActionPerformed

    private void MenuItemCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCursoActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(cursosDB,
                    JOptionPane.showInputDialog(null, "Informe o nome do CURSO que você deseja Excluir\n Digite:"
                            + " Tudo para excluir todos os Cursos", "Quem você deseja excluir?",
                            JOptionPane.QUESTION_MESSAGE),
                    "registroEscolas.txt");
            if (deletar.isDeletado()) {
                cursosDB = deletar.listaAtualizada;
                salvarDados(cursosDB, "registroEscolas.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }

        }
    }//GEN-LAST:event_MenuItemCursoActionPerformed

    private void MenuItemDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemDiscActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(disciplinaDB,
                    JOptionPane.showInputDialog(null, "Informe o nome a DISCIPLINA do cadastro que você deseja"
                            + " Excluir\n Digite: \"Tudo\" para excluir todas os Disciplinas", "Quem você "
                            + "deseja excluir?", JOptionPane.QUESTION_MESSAGE),
                    "registroDisciplina.txt");
            if (deletar.isDeletado()) {
                disciplinaDB = deletar.listaAtualizada;
                salvarDados(disciplinaDB, "registroDisciplina.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }

        }
    }//GEN-LAST:event_MenuItemDiscActionPerformed

    private void MenuItemTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemTurmaActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que deseja DELETAR os registros?", "Deletar!",
                JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {

            deletar.DeletFile(turmasDB,
                    JOptionPane.showInputDialog(null, "Informe o nome da TURMA que você deseja Excluir\n Digite:"
                            + " Tudo para excluir todos os Turmas", "Quem você deseja excluir?",
                            JOptionPane.QUESTION_MESSAGE),
                    "registroTurma.txt");
            if (deletar.isDeletado()) {
                turmasDB = deletar.listaAtualizada;
                salvarDados(turmasDB, "registroTurma.txt");
                JOptionPane.showMessageDialog(null, "A aplicação precisa ser reiniciada");
                reiniciarApp();
            }
        }
    }//GEN-LAST:event_MenuItemTurmaActionPerformed

    private void editarProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarProfessorActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("professor");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome do Professor","Matricula","Endereço","Telefone"};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            for (int i = 0; i < professorDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                professor = (Professor) professorDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != professor.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(professor.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(professor.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(professor.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(professor.getTelefone(), linhas, 3);
                    }
                } else if (matriculaAnterior == professor.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                matriculaAnterior = professor.getMatricula();
                //Remove todas as linhas da tabela
            }
        });

    }//GEN-LAST:event_editarProfessorActionPerformed

    private void menuVerEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerEditarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuVerEditarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        switch (btnEditar.getName()) {
            case "professor":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    professor = (Professor) professorDB.get(i);
                    professor.setNome((String) TabelaEditar.getValueAt(i, 0));
                    professor.setMatricula((int) TabelaEditar.getValueAt(i, 1));
                    professor.setEndereco((String) TabelaEditar.getValueAt(i, 2));
                    professor.setTelefone((int) TabelaEditar.getValueAt(i, 3));
                    professorDB.remove(i);
                    professorDB.add(i, professor);
                }   salvarDados(professorDB, "registroProfessor.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "aluno":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    aluno = (Aluno) alunoDB.get(i);
                    aluno.setNome((String) TabelaEditar.getValueAt(i, 0));
                    aluno.setMatricula((int) TabelaEditar.getValueAt(i, 1));
                    aluno.setEndereco((String) TabelaEditar.getValueAt(i, 2));
                    aluno.setTelefone((int) TabelaEditar.getValueAt(i, 3));
                    alunoDB.remove(i);
                    alunoDB.add(i, aluno);
                }   salvarDados(alunoDB, "registroAluno.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "funcionario":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    funcionario = (Funcionarios) funcionarioDB.get(i);
                    funcionario.setNome((String) TabelaEditar.getValueAt(i, 0));
                    funcionario.setMatricula((int) TabelaEditar.getValueAt(i, 1));
                    funcionario.setEndereco((String) TabelaEditar.getValueAt(i, 2));
                    funcionario.setTelefone((int) TabelaEditar.getValueAt(i, 3));
                    funcionarioDB.remove(i);
                    funcionarioDB.add(i, funcionario);
                }   salvarDados(funcionarioDB, "registroAdm.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "escolas":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    Escolas escola = (Escolas) escolasDB.get(i);
                    escola.setNome((String) TabelaEditar.getValueAt(i, 0));
                    escolasDB.remove(i);
                    escolasDB.add(i, escola);
                }   salvarDados(escolasDB, "registroEscolas.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "cursos":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    Curso curso = (Curso) cursosDB.get(i);
                    curso.setNome((String) TabelaEditar.getValueAt(i, 0));
                    cursosDB.remove(i);
                    cursosDB.add(i, curso);
                }   salvarDados(cursosDB, "registroCurso.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "disciplinas":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    Disciplinas disciplina = (Disciplinas) disciplinaDB.get(i);
                    disciplina.setNome((String) TabelaEditar.getValueAt(i, 0));
                    disciplinaDB.remove(i);
                    disciplinaDB.add(i, disciplina);
                }   salvarDados(disciplinaDB, "registroDisciplina.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            case "turmas":
                for (int i = 0; i < TabelaEditar.getRowCount(); i++) {
                    Turmas turma = (Turmas) turmasDB.get(i);
                    turma.setNome((String) TabelaEditar.getValueAt(i, 0));
                    turmasDB.remove(i);
                    turmasDB.add(i, turma);
                }   salvarDados(turmasDB, "registroTurma.txt");
                JOptionPane.showMessageDialog(null, "As mudanças foram salvas com sucesso!", "Sucesso!",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            default: 
                break;
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void editarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarAlunoActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("aluno");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome do Aluno","Matricula","Endereço","Telefone"};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;

            for (int i = 0; i < alunoDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                aluno = (Aluno) alunoDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != aluno.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(aluno.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(aluno.getTelefone(), linhas, 3);
                    }
                } else if (matriculaAnterior == aluno.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }
                if (alunoDB.isEmpty()) {
                    while (TabelaEditar.getRowCount() > linhas) {
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                    }
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                matriculaAnterior = aluno.getMatricula();
                //Remove todas as linhas da tabela

            }
        });
    }//GEN-LAST:event_editarAlunoActionPerformed

    private void editarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarFuncionarioActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("funcionario");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome do Funcionario","Matricula","Endereço","Telefone"};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;

            for (int i = 0; i < funcionarioDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                funcionario = (Funcionarios) funcionarioDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != funcionario.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(funcionario.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(funcionario.getMatricula(), linhas, 1);
                        TabelaEditar.setValueAt(funcionario.getEndereco(), linhas, 2);
                        TabelaEditar.setValueAt(funcionario.getTelefone(), linhas, 3);
                    }
                } else if (matriculaAnterior == funcionario.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                matriculaAnterior = funcionario.getMatricula();

            }
        });
    }//GEN-LAST:event_editarFuncionarioActionPerformed

    private void frameEditorPessoasWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_frameEditorPessoasWindowClosed
    }//GEN-LAST:event_frameEditorPessoasWindowClosed

    private void btnCalcelarEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcelarEditarActionPerformed
       //Colocando a janela em segundo plano
        frameEditorPessoas.toBack();
    }//GEN-LAST:event_btnCalcelarEditarActionPerformed

    private void editarEscolasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarEscolasActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("escolas");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome da Escola","ID","",""};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            
            for (int i = 0; i < escolasDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                Escolas escola = (Escolas) escolasDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(escola.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(escola.getId(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(escola.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(escola.getId(), linhas, 1);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(escola.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(escola.getId(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(escola.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(escola.getId(), linhas, 1);
                    }
                } 
                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                
            }
        });
    }//GEN-LAST:event_editarEscolasActionPerformed

    private void editarCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarCursosActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("cursos");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome do curso","ID","",""};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            
            for (int i = 0; i < cursosDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                Curso curso = (Curso) cursosDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(curso.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(curso.getId(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(curso.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(curso.getId(), linhas, 1);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(curso.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(curso.getId(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(curso.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(curso.getId(), linhas, 1);
                    }
                } 
                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                
            }
        });
    }//GEN-LAST:event_editarCursosActionPerformed

    private void editarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarDisciplinasActionPerformed
          frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("disciplinas");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome da disciplina","ID","",""};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            
            for (int i = 0; i < disciplinaDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                Disciplinas disciplina = (Disciplinas) disciplinaDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(disciplina.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(disciplina.getId(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(disciplina.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(disciplina.getId(), linhas, 1);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(disciplina.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(disciplina.getId(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(disciplina.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(disciplina.getId(), linhas, 1);
                    }
                } 
                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                
            }
        });
    }//GEN-LAST:event_editarDisciplinasActionPerformed

    private void editarTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarTurmasActionPerformed
        frameEditorPessoas.setVisible(true);
        painelEditar.setEnabled(true);
        painelEditar.setVisible(true);
        btnEditar.setName("turmas");
        JTable t1 = new JTable(TabelaEditar.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        String vetor[] = {"Nome da Turma","ID","",""};
        modelo1.setColumnIdentifiers(vetor);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;
            
            for (int i = 0; i < turmasDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                Turmas turma = (Turmas) turmasDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        TabelaEditar.setValueAt(turma.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(turma.getID(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(turma.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(turma.getID(), linhas, 1);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        TabelaEditar.setValueAt(turma.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(turma.getID(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(TabelaEditar.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        TabelaEditar.setValueAt(turma.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(turma.getID(), linhas, 1);
                    }
                } 
                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (TabelaEditar.getRowCount() > linhas) {
                    JTable t = new JTable(TabelaEditar.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(TabelaEditar.getRowCount() - linhas);
                }
                
            }
        });
    }//GEN-LAST:event_editarTurmasActionPerformed

    private void btnSelecionarAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarAlunosActionPerformed
        frameSelecionarAlunos.setVisible(true);
        painelSelecionarAlunos.setEnabled(true);
        painelSelecionarAlunos.setVisible(true);
        JTable t1 = new JTable(tabelaSelecionarAlunos.getModel());
        DefaultTableModel modelo1 = (DefaultTableModel) t1.getModel();
        modelo1.setNumRows(0);
        SwingUtilities.invokeLater(() -> {
            int matriculaAnterior = 0;
            int linhas = 0;

            for (int i = 0; i < alunoDB.size(); i++) {
                //atribui ao objeto um cadastro alocano na arrey
                aluno = (Aluno) alunoDB.get(i);
                //Enquanto o cadastro for diferente do loop anterior..
                if (i > 0 && matriculaAnterior != aluno.getMatricula()) {
                    try {
                        //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                        tabelaSelecionarAlunos.setValueAt(aluno.getNome(), linhas, 0);
                        TabelaEditar.setValueAt(aluno.getMatricula(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(tabelaSelecionarAlunos.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        tabelaSelecionarAlunos.setValueAt(aluno.getNome(), linhas, 0);
                        tabelaSelecionarAlunos.setValueAt(aluno.getMatricula(), linhas, 1);
                    }
                    //Verifica se é a primeira passagem do loop
                } else if (i == 0) {
                    try {
                        //Enquanto houver linhas suficientes na tabela..
                        tabelaSelecionarAlunos.setValueAt(aluno.getNome(), linhas, 0);
                        tabelaSelecionarAlunos.setValueAt(aluno.getMatricula(), linhas, 1);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                        JTable t = new JTable(tabelaSelecionarAlunos.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.addRow(new Object[]{null, null});
                        //Preenche a linha vazia que foi criada
                        tabelaSelecionarAlunos.setValueAt(aluno.getNome(), linhas, 0);
                        tabelaSelecionarAlunos.setValueAt(aluno.getMatricula(), linhas, 1);
                    }
                } else if (matriculaAnterior == aluno.getMatricula()) {
                    //decrementa em linhas se matricula for igual o da varredura anterior.
                    linhas--;
                }
                if (alunoDB.isEmpty()) {
                    while (tabelaSelecionarAlunos.getRowCount() > linhas) {
                        JTable t = new JTable(tabelaSelecionarAlunos.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.removeRow(tabelaSelecionarAlunos.getRowCount() - linhas);
                    }
                }

                linhas++;
                //Remove as linhas desnecessarias da tabela
                while (tabelaSelecionarAlunos.getRowCount() > linhas) {
                    JTable t = new JTable(tabelaSelecionarAlunos.getModel());
                    DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                    modelo.removeRow(tabelaSelecionarAlunos.getRowCount() - linhas);
                }
                matriculaAnterior = aluno.getMatricula();
                //Remove todas as linhas da tabela

            }
            txtAlunosParticipantesTurmas.setText("Selecione os alunos que fazem parte dessa turma:");
        });
    }//GEN-LAST:event_btnSelecionarAlunosActionPerformed

    private void btnSelecionarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarAlunoActionPerformed
        if(tabelaSelecionarAlunos.getSelectedRowCount() != 0){
        int x[] = tabelaSelecionarAlunos.getSelectedRows();
        for (int i = 0; i < tabelaSelecionarAlunos.getSelectedRowCount(); i++) {
            System.out.println("iten selecionado" + x[i]);
            System.out.println(tabelaSelecionarAlunos.getValueAt(x[i], 0));
            alunosSelecionados.add(alunoDB.get(x[i]));
        }
        
        txtAlunosParticipantesTurmas.setText("Os alunos foram selecionados !");
        btnSelecionarAlunos.setEnabled(false);
        frameSelecionarAlunos.setVisible(false);
        }
    }//GEN-LAST:event_btnSelecionarAlunoActionPerformed

    private void relatorioTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioTurmasActionPerformed
        relatorio.gerarPDF(turmasDB, "Turmas");
    }//GEN-LAST:event_relatorioTurmasActionPerformed

    private void btnCalcelarSelecaoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcelarSelecaoAlunoActionPerformed
        frameSelecionarAlunos.setVisible(false);
    }//GEN-LAST:event_btnCalcelarSelecaoAlunoActionPerformed

    private void relatorioescolasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioescolasActionPerformed
        relatorio.gerarPDF(escolasDB, "Escolas");
    }//GEN-LAST:event_relatorioescolasActionPerformed

    private void relatorioCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioCursosActionPerformed
        relatorio.gerarPDF(cursosDB, "Cursos");
    }//GEN-LAST:event_relatorioCursosActionPerformed

    private void relatorioDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatorioDisciplinasActionPerformed
        relatorio.gerarPDF(disciplinaDB, "Disciplinas");
    }//GEN-LAST:event_relatorioDisciplinasActionPerformed

    private void nomeEscolaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeEscolaFocusGained
        nomeEscola.setBackground(Color.white);
    }//GEN-LAST:event_nomeEscolaFocusGained

    private void salarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salarioFocusLost
        if (salario.getText().equals("")) {
            salario.setText("Salario");
        }
    }//GEN-LAST:event_salarioFocusLost

    private void salarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salarioFocusGained
        if (salario.getText().equals("Salario")) {
            salario.setText("");
        }
        if (salario.getBackground().equals(Color.red)) {
            salario.setBackground(Color.white);
            salario.setForeground(Color.black);
        }
    }//GEN-LAST:event_salarioFocusGained

    private void btnTabPessoasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabPessoasActionPerformed
        btnTabDiaciplinas.setBackground(Color.DARK_GRAY);
        btnTabCursos.setBackground(Color.DARK_GRAY);
        btnTabTurmas.setBackground(Color.DARK_GRAY);
        btnTabEscolas.setBackground(Color.DARK_GRAY);
        btnTabPessoas.setBackground(Color.LIGHT_GRAY);
        backGround.setVisible(false);
        tabCadastroProfFun.setVisible(true);
        tabCadastroEscolas.setVisible(false);
        tabCurso.setVisible(false);
        tabDisciplinas.setVisible(false);
        tabTurmas.setVisible(false);
    }//GEN-LAST:event_btnTabPessoasActionPerformed

    private void btnTabEscolasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabEscolasActionPerformed
        btnTabDiaciplinas.setBackground(Color.DARK_GRAY);
        btnTabCursos.setBackground(Color.DARK_GRAY);
        btnTabTurmas.setBackground(Color.DARK_GRAY);
        btnTabEscolas.setBackground(Color.LIGHT_GRAY);
        btnTabPessoas.setBackground(Color.DARK_GRAY);
        backGround.setVisible(false);
        tabCadastroProfFun.setVisible(false);
        tabCadastroEscolas.setVisible(true);
        tabCurso.setVisible(false);
        tabDisciplinas.setVisible(false);
        tabTurmas.setVisible(false);
    }//GEN-LAST:event_btnTabEscolasActionPerformed

    private void btnTabCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabCursosActionPerformed
        btnTabDiaciplinas.setBackground(Color.DARK_GRAY);
        btnTabCursos.setBackground(Color.LIGHT_GRAY);
        btnTabTurmas.setBackground(Color.DARK_GRAY);
        btnTabEscolas.setBackground(Color.DARK_GRAY);
        btnTabPessoas.setBackground(Color.DARK_GRAY);
        backGround.setVisible(false);
        tabCadastroProfFun.setVisible(false);
        tabCadastroEscolas.setVisible(false);
        tabCurso.setVisible(true);
        tabDisciplinas.setVisible(false);
        tabTurmas.setVisible(false);
    }//GEN-LAST:event_btnTabCursosActionPerformed

    private void btnTabDiaciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabDiaciplinasActionPerformed
        btnTabDiaciplinas.setBackground(Color.LIGHT_GRAY);
        btnTabCursos.setBackground(Color.DARK_GRAY);
        btnTabTurmas.setBackground(Color.DARK_GRAY);
        btnTabEscolas.setBackground(Color.DARK_GRAY);
        btnTabPessoas.setBackground(Color.DARK_GRAY);
        backGround.setVisible(false);
        tabCadastroProfFun.setVisible(false);
        tabCadastroEscolas.setVisible(false);
        tabCurso.setVisible(false);
        tabDisciplinas.setVisible(true);
        tabTurmas.setVisible(false);
    }//GEN-LAST:event_btnTabDiaciplinasActionPerformed

    private void btnTabTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabTurmasActionPerformed
        btnTabDiaciplinas.setBackground(Color.DARK_GRAY);
        btnTabCursos.setBackground(Color.DARK_GRAY);
        btnTabTurmas.setBackground(Color.LIGHT_GRAY);
        btnTabEscolas.setBackground(Color.DARK_GRAY);
        btnTabPessoas.setBackground(Color.DARK_GRAY);
        backGround.setVisible(false);
        tabCadastroProfFun.setVisible(false);
        tabCadastroEscolas.setVisible(false);
        tabCurso.setVisible(false);
        tabDisciplinas.setVisible(false);
        tabTurmas.setVisible(true);
    }//GEN-LAST:event_btnTabTurmasActionPerformed

    private void btnSairEsqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairEsqActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tém certeza que deseja sair da aplicação?",
                "Sair da aplicação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnSairEsqActionPerformed

    private void btnSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSobreActionPerformed
        btnTabDiaciplinas.setBackground(Color.DARK_GRAY);
        btnTabCursos.setBackground(Color.DARK_GRAY);
        btnTabTurmas.setBackground(Color.DARK_GRAY);
        btnTabEscolas.setBackground(Color.DARK_GRAY);
        btnTabPessoas.setBackground(Color.DARK_GRAY);
        btnSobre.setFocusable(true);
        backGround.setVisible(true);
        tabCadastroProfFun.setVisible(false);
        tabCadastroEscolas.setVisible(false);
        tabCurso.setVisible(false);
        tabDisciplinas.setVisible(false);
        tabTurmas.setVisible(false);
    }//GEN-LAST:event_btnSobreActionPerformed

    int xx, xy;
    private void painelAEsquerdaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelAEsquerdaMousePressed
        xx = evt.getX();
        xy = evt.getY();
    }//GEN-LAST:event_painelAEsquerdaMousePressed

    private void painelAEsquerdaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelAEsquerdaMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xx, y - xy);
    }//GEN-LAST:event_painelAEsquerdaMouseDragged

    private void menuBarPrincipalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarPrincipalMousePressed
        xx = evt.getX();
        xy = evt.getY();
    }//GEN-LAST:event_menuBarPrincipalMousePressed

    private void menuBarPrincipalMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarPrincipalMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xx, y - xy);
    }//GEN-LAST:event_menuBarPrincipalMouseDragged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String urlGithub = "https://github.com/cleissonbarbosa/GestaoFacul";
        java.awt.Desktop myNewBrowserDesktop = java.awt.Desktop.getDesktop();
        try {
            java.net.URI myNewLocation = new java.net.URI(urlGithub);
            myNewBrowserDesktop.browse(myNewLocation);
        } catch (URISyntaxException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    //METODO PARA REINICIALIZAR O PROGRAMA
    private void reiniciarApp() {
        
        StringBuilder cmd = new StringBuilder();
        cmd.append(System.getProperty("java.home") + File.separator + "bin" + File.separator + "java ");
        for (String jvmArg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
            cmd.append(jvmArg + " ");
        }
        cmd.append("-cp ").append(ManagementFactory.getRuntimeMXBean().getClassPath()).append(" ");
        cmd.append(Main.class.getName()).append(" ");
        for (String arg : ar) {
            cmd.append(arg).append(" ");
        }
        try {
            Runtime.getRuntime().exec(cmd.toString());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(() -> {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (VISUALDOAPP.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
         ar = args;
        /* Create and display the form */
        //RECUPERANDO TODOS OS DADOS SALVOS
            new Main().setVisible(true);
            
            Gson gson = new Gson();
            //Recupera professores
            java.lang.reflect.Type tipoProf = new TypeToken<ArrayList<Professor>>() {
            }.getType();
            
            ReadFile("registroProfessor.txt").forEach((s) -> {
                professorDB = gson.fromJson(s, tipoProf);
                for (int i = 0; i < professorDB.size(); i++) {
                    Professor professor = (Professor) professorDB.get(i);
                    ProfessorSeletor.addItem(professor.getNome());
                    
                }
            });
            //Recupera Alunos
            java.lang.reflect.Type tipoAluno = new TypeToken<ArrayList<Aluno>>() {
            }.getType();
            ReadFile("registroAluno.txt").forEach((s) -> {
                alunoDB = gson.fromJson(s, tipoAluno);
                /*for (int i = 0; i < alunoDB.size(); i++) {
                
                }*/
            });
            //Recupera Curso
            java.lang.reflect.Type tipoCurso = new TypeToken<ArrayList<Curso>>() {
            }.getType();
            ReadFile("registroCurso.txt").forEach((s) -> {
                cursosDB = gson.fromJson(s, tipoCurso);
                for (int i = 0; i < cursosDB.size(); i++) {
                    Curso curso = (Curso) cursosDB.get(i);
                    cursosSeletor.addItem(curso.getNome());
                    cursosSeletorAluno.addItem(curso.getNome());

                }
            });
            //Recupera disciplinas
            java.lang.reflect.Type tipoDisciplina = new TypeToken<ArrayList<Disciplinas>>() {
            }.getType();
            ReadFile("registroDisciplina.txt").forEach((s) -> {
                disciplinaDB = gson.fromJson(s, tipoDisciplina);
                for (int i = 0; i < disciplinaDB.size(); i++) {
                    Disciplinas disciplina = (Disciplinas) disciplinaDB.get(i);
                    DisciplinaSeletor.addItem(disciplina.getNome());
                }
            });
            //Recupera turmas
            java.lang.reflect.Type tipoTurma = new TypeToken<ArrayList<Turmas>>() {
            }.getType();
            ReadFile("registroTurma.txt").forEach((s) -> {
                turmasDB = gson.fromJson(s, tipoTurma);
            });
            //Recupera setor
            java.lang.reflect.Type tipoSetor = new TypeToken<ArrayList<Setor>>() {
            }.getType();
            ReadFile("registroSetor.txt").forEach((s) -> {
                setorDB = gson.fromJson(s, tipoSetor);
                for (int i = 0; i < setorDB.size(); i++) {
                    Setor setor = (Setor) setorDB.get(i);
                    setorSeletor.addItem(setor.getNome());
                }
            });
            //Recupera Adm
            java.lang.reflect.Type tipoAdm = new TypeToken<ArrayList<Administrativo>>() {
            }.getType();
            ReadFile("registroAdm.txt").forEach((s) -> {
                funcionarioDB = gson.fromJson(s, tipoAdm);
            });
            //Recupera Escolas
            java.lang.reflect.Type tipoEscolas = new TypeToken<ArrayList<Escolas>>() {
            }.getType();
            ReadFile("registroEscolas.txt").stream().map((e) -> {
                escolasDB = gson.fromJson(e, tipoEscolas);
                return e;
            }).filter((_item) -> (!escolasDB.isEmpty())).map((_item) -> "").forEachOrdered((aux) -> {
                for (int i = 0; i < escolasDB.size(); i++) {
                    Escolas novo = (Escolas) escolasDB.get(i);
                    if (aux.equals(novo.getNome())) {
                    } else {
                        escolhaEscola.addItem(novo.getNome());
                        escolas.addItem(novo.getNome());
                        escolasCurso.addItem(novo.getNome());
                    }
                    aux = novo.getNome();
                }
            });
        });
    }
//Variaveis da interface grafica
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private static javax.swing.JComboBox<String> DisciplinaSeletor;
    private javax.swing.JLabel IconePessoa;
    private javax.swing.JMenu MenuGerarRelatorio;
    private javax.swing.JMenuItem MenuItemAluno;
    private javax.swing.JMenuItem MenuItemCurso;
    private javax.swing.JMenuItem MenuItemDelTudo;
    private javax.swing.JMenuItem MenuItemDisc;
    private javax.swing.JMenuItem MenuItemEscola;
    private javax.swing.JMenuItem MenuItemFunc;
    private javax.swing.JMenuItem MenuItemProfessor;
    private javax.swing.JMenuItem MenuItemSair;
    private javax.swing.JMenuItem MenuItemTurma;
    private static javax.swing.JComboBox<String> ProfessorSeletor;
    private javax.swing.JTable TabelaEditar;
    private javax.swing.JPanel backGround;
    private javax.swing.JLabel backgroundCabeçalho;
    private javax.swing.JLabel backgroundCabeçalho1;
    private javax.swing.JLabel backgroundCabeçalho2;
    private javax.swing.JLabel backgroundCabeçalho3;
    private javax.swing.JLabel backgroundCabeçalho4;
    private javax.swing.JButton btnCadastrarSetor;
    private javax.swing.JButton btnCalcelarEditar;
    private javax.swing.JButton btnCalcelarSelecaoAluno;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnSairEsq;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarCurso;
    private javax.swing.JButton btnSalvarDisciplinas;
    private javax.swing.JButton btnSalvarEscola;
    private javax.swing.JButton btnSalvarTurmas;
    private javax.swing.JButton btnSelecionarAluno;
    private javax.swing.JButton btnSelecionarAlunos;
    private javax.swing.JButton btnSobre;
    private javax.swing.JButton btnTabCursos;
    private javax.swing.JButton btnTabDiaciplinas;
    private javax.swing.JButton btnTabEscolas;
    private javax.swing.JButton btnTabPessoas;
    private javax.swing.JButton btnTabTurmas;
    private static javax.swing.JComboBox<String> cursosSeletor;
    private static javax.swing.JComboBox<String> cursosSeletorAluno;
    private javax.swing.JTextField dataDeAdimissao;
    private javax.swing.JMenuItem editarAluno;
    private javax.swing.JMenuItem editarCursos;
    private javax.swing.JMenuItem editarDisciplinas;
    private javax.swing.JMenuItem editarEscolas;
    private javax.swing.JMenuItem editarFuncionario;
    private javax.swing.JMenuItem editarProfessor;
    private javax.swing.JMenuItem editarTurmas;
    private javax.swing.JTextField endereco;
    private static javax.swing.JComboBox<String> escolas;
    private static javax.swing.JComboBox<String> escolasCurso;
    private javax.swing.JComboBox<String> escolha;
    private static javax.swing.JComboBox<String> escolhaEscola;
    private javax.swing.JFrame frameEditorPessoas;
    private javax.swing.JFrame frameSelecionarAlunos;
    private javax.swing.JLabel imgCadastroDePessoas;
    private javax.swing.JLabel imgEscola;
    private javax.swing.JLabel imgTurmas;
    private javax.swing.JLabel imgTurmas1;
    private javax.swing.JLabel imgTurmas2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JLayeredPane jLayeredPane6;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparador;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField matricula;
    private javax.swing.JMenuBar menuBarPrincipal;
    private javax.swing.JMenu menuDeletarRegistros;
    private javax.swing.JMenu menuGerarRelatorio;
    private javax.swing.JMenu menuVerEditar;
    private javax.swing.JTextField nome;
    private javax.swing.JTextField nomeCurso;
    private javax.swing.JTextField nomeDisciplina;
    private javax.swing.JTextField nomeEscola;
    private javax.swing.JTextField nomeTurma;
    private javax.swing.JPanel painelADireita;
    private javax.swing.JPanel painelAEsquerda;
    private javax.swing.JInternalFrame painelEditar;
    private javax.swing.JInternalFrame painelSelecionarAlunos;
    private javax.swing.JProgressBar progressoTabela;
    private javax.swing.JMenuItem relatorioAlunos;
    private javax.swing.JMenuItem relatorioCursos;
    private javax.swing.JMenuItem relatorioDisciplinas;
    private javax.swing.JMenuItem relatorioFuncionarios;
    private javax.swing.JMenuItem relatorioProfessores;
    private javax.swing.JMenuItem relatorioTurmas;
    private javax.swing.JMenuItem relatorioescolas;
    private javax.swing.JTextField salario;
    private static javax.swing.JComboBox<String> setorSeletor;
    private javax.swing.JPanel tabCadastroEscolas;
    private javax.swing.JPanel tabCadastroProfFun;
    private javax.swing.JPanel tabCurso;
    private javax.swing.JPanel tabDisciplinas;
    private javax.swing.JPanel tabTurmas;
    private javax.swing.JTable tabelaSelecionarAlunos;
    private javax.swing.JTable tabelaVerProfessores;
    private javax.swing.JTextField telefone;
    private javax.swing.JLabel txtAlunosParticipantesTurmas;
    private javax.swing.JLabel txtArquitetura;
    private javax.swing.JLabel txtCadastrarEscola;
    private javax.swing.JLabel txtCadastroDePessoas;
    private javax.swing.JLabel txtDesenvolvedor;
    private javax.swing.JLabel txtEscolhaCurso;
    private javax.swing.JLabel txtEscolhaCursoDisciplina;
    private javax.swing.JLabel txtEscolhaDisciplina;
    private javax.swing.JLabel txtEscolhaEscola;
    private javax.swing.JLabel txtEscolhaProfessor;
    private javax.swing.JLabel txtEscolhaSetor;
    private javax.swing.JLabel txtListarProfessores;
    private javax.swing.JLabel txtNomeUsuario;
    private javax.swing.JLabel txtQuemVoceQuerCadastrar;
    private javax.swing.JLabel txtSelecionarEscolaCurso;
    private javax.swing.JLabel txtSetArquitetura;
    private javax.swing.JLabel txtTituloApp;
    private javax.swing.JLabel txtTurmas;
    private javax.swing.JLabel txtTurmas1;
    private javax.swing.JLabel txtTurmas2;
    private javax.swing.JLabel txtUsuario;
    private javax.swing.JLabel txtVoceEstaUsando;
    private javax.swing.JLabel txtgetSo;
    // End of variables declaration//GEN-END:variables
    
    private static final String VISUALDOAPP = "Nimbus";
    
    //Objetos
    GerarRelatorio relatorio = new GerarRelatorio();
    GerenciaRegistros deletar = new GerenciaRegistros();
    Professor professor;
    Administrativo administrativo;
    Funcionarios funcionario;
    Aluno aluno;
    Professor anterior;
    Turmas turma = new Turmas();
    
    //Strings
    private String exibeCadastro = "";
    private static String[] ar;
    
    /**
     * Guardar os alunos selecionados para a turma
     */
    public static ArrayList alunosSelecionados = new ArrayList(); 

    /**
     * Guardar professores registrados pelo usuario
     */
    public static ArrayList professorDB = new ArrayList();

    /**
     * guardar os funcionarios registrados pelo usuario
     */
    public static ArrayList funcionarioDB = new ArrayList();

    /**
     * Guardar alunos registrados pelo usuario
     */
    public static ArrayList alunoDB = new ArrayList();

    /**
     * Guardar Escolas registradas pelo usuario
     */
    public static ArrayList escolasDB = new ArrayList();

    /**
     * Guardar Cursos registrados pelo usuario
     */
    public static ArrayList cursosDB = new ArrayList();

    /**
     * Guardar Disciplinas registrados pelo usuario
     */
    public static ArrayList disciplinaDB = new ArrayList();

    /**
     * Guardar Turmas registrados pelo usuario
     */
    public static ArrayList turmasDB = new ArrayList();

    /**
     * Guardar Setores registrados pelo usuario
     */
    public static ArrayList setorDB = new ArrayList();
    
    //Variaveis do tipo primitivo
    private int dataAdimicao;
    private int matriculaFunc;
    private float salarioFunc;
    private int telefoneFunc;
}
